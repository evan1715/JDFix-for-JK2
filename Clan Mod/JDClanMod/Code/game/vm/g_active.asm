export P_SetTwitchInfo
code
proc P_SetTwitchInfo 4 0
file "../g_active.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:#include "g_local.h"
;5:
;6:qboolean PM_SaberInTransition( int move );
;7:qboolean PM_SaberInStart( int move );
;8:qboolean PM_SaberInReturn( int move );
;9:
;10:void P_SetTwitchInfo(gclient_t	*client)
;11:{
line 12
;12:	client->ps.painTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 13
;13:	client->ps.painDirection ^= 1;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 14
;14:}
LABELV $78
endproc P_SetTwitchInfo 4 0
export M_StringEscapeToEnters
proc M_StringEscapeToEnters 16 0
line 22
;15:/*
;16:=================
;17:M_StringEscapeToEnters
;18:
;19:=================
;20:*/
;21:void M_StringEscapeToEnters( char * source, char * dest, int bufsize )
;22:{
line 25
;23:	int is, id; // source and destination
;24:
;25:	is = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 26
;26:	id = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $82
JUMPV
LABELV $81
line 29
;27:
;28:	while ( source[is] != 0 && is < bufsize - 1)
;29:	{
line 31
;30:		char toCopy;
;31:		if( source[is] == '\\' ){ // Found escape character?
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 92
NEI4 $84
line 32
;32:			if( is + 1 < bufsize && source[is + 1] == 'n'){
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
ADDRFP4 8
INDIRI4
GEI4 $86
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 110
NEI4 $86
line 34
;33:				// Found new line
;34:				toCopy = '\n';
ADDRLP4 8
CNSTI1 10
ASGNI1
line 35
;35:				is ++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 36
;36:			}
ADDRGP4 $85
JUMPV
LABELV $86
line 37
;37:			else {
line 39
;38:				// No new line, just copy backslash:
;39:				toCopy = '\\';
ADDRLP4 8
CNSTI1 92
ASGNI1
line 40
;40:			}
line 41
;41:		}
ADDRGP4 $85
JUMPV
LABELV $84
line 42
;42:		else{
line 44
;43:			// Just copy character.
;44:			toCopy = source[is];
ADDRLP4 8
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 45
;45:		}
LABELV $85
line 47
;46:
;47:		dest[id] = toCopy;
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 8
INDIRI1
ASGNI1
line 48
;48:		id ++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 49
;49:		is ++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 50
;50:	}
LABELV $82
line 28
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $88
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
LTI4 $81
LABELV $88
line 52
;51:
;52:	dest[id] = 0;
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 53
;53:}
LABELV $80
endproc M_StringEscapeToEnters 16 0
export P_DamageFeedback
proc P_DamageFeedback 48 12
line 66
;54:
;55:
;56:/*
;57:===============
;58:G_DamageFeedback
;59:
;60:Called just before a snapshot is sent to the given player.
;61:Totals up all damage and generates both the player_state_t
;62:damage values to that client for pain blends and kicks, and
;63:global pain sound events for all clients.
;64:===============
;65:*/
;66:void P_DamageFeedback( gentity_t *player ) {
line 71
;67:	gclient_t	*client;
;68:	float	count;
;69:	vec3_t	angles;
;70:
;71:	client = player->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
line 72
;72:	if ( client->ps.pm_type == PM_DEAD ) {
ADDRLP4 20
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $90
line 73
;73:		return;
ADDRGP4 $89
JUMPV
LABELV $90
line 77
;74:	}
;75:
;76:	// total points of damage shot at the player this frame
;77:	count = client->damage_blood + client->damage_armor;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 1748
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 1744
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 78
;78:	if ( count == 0 ) {
ADDRLP4 4
INDIRF4
CNSTF4 0
NEF4 $92
line 79
;79:		return;		// didn't take any damage
ADDRGP4 $89
JUMPV
LABELV $92
line 82
;80:	}
;81:
;82:	if ( count > 255 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
LEF4 $94
line 83
;83:		count = 255;
ADDRLP4 4
CNSTF4 1132396544
ASGNF4
line 84
;84:	}
LABELV $94
line 90
;85:
;86:	// send the information to the client
;87:
;88:	// world damage (falling, slime, etc) uses a special code
;89:	// to make the blend blob centered instead of positional
;90:	if ( client->damage_fromWorld ) {
ADDRLP4 0
INDIRP4
CNSTI4 1768
ADDP4
INDIRI4
CNSTI4 0
EQI4 $96
line 91
;91:		client->ps.damagePitch = 255;
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTI4 255
ASGNI4
line 92
;92:		client->ps.damageYaw = 255;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 255
ASGNI4
line 94
;93:
;94:		client->damage_fromWorld = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 1768
ADDP4
CNSTI4 0
ASGNI4
line 95
;95:	} else {
ADDRGP4 $97
JUMPV
LABELV $96
line 96
;96:		vectoangles( client->damage_from, angles );
ADDRLP4 0
INDIRP4
CNSTI4 1756
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 97
;97:		client->ps.damagePitch = angles[PITCH]/360.0 * 256;
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1132462080
ADDRLP4 8
INDIRF4
CNSTF4 1135869952
DIVF4
MULF4
CVFI4 4
ASGNI4
line 98
;98:		client->ps.damageYaw = angles[YAW]/360.0 * 256;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1132462080
ADDRLP4 8+4
INDIRF4
CNSTF4 1135869952
DIVF4
MULF4
CVFI4 4
ASGNI4
line 99
;99:	}
LABELV $97
line 102
;100:
;101:	// play an apropriate pain sound
;102:	if ( (level.time > player->pain_debounce_time) && !(player->flags & FL_GODMODE) ) {
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 664
ADDP4
INDIRI4
LEI4 $99
ADDRLP4 28
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $99
line 105
;103:
;104:		// don't do more than two pain sounds a second
;105:		if ( level.time - client->ps.painTime < 500 ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
SUBI4
CNSTI4 500
GEI4 $102
line 106
;106:			return;
ADDRGP4 $89
JUMPV
LABELV $102
line 108
;107:		}
;108:		P_SetTwitchInfo(client);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 P_SetTwitchInfo
CALLV
pop
line 109
;109:		player->pain_debounce_time = level.time + 700;
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 700
ADDI4
ASGNI4
line 110
;110:		G_AddEvent( player, EV_PAIN, player->health );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTI4 77
ARGI4
ADDRLP4 32
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 111
;111:		client->ps.damageEvent++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 113
;112:
;113:		if (client->damage_armor && !client->damage_blood)
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1744
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $106
ADDRLP4 0
INDIRP4
CNSTI4 1748
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
NEI4 $106
line 114
;114:		{
line 115
;115:			client->ps.damageType = 1; //pure shields
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 1
ASGNI4
line 116
;116:		}
ADDRGP4 $107
JUMPV
LABELV $106
line 117
;117:		else if (client->damage_armor)
ADDRLP4 0
INDIRP4
CNSTI4 1744
ADDP4
INDIRI4
CNSTI4 0
EQI4 $108
line 118
;118:		{
line 119
;119:			client->ps.damageType = 2; //shields and health
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 2
ASGNI4
line 120
;120:		}
ADDRGP4 $109
JUMPV
LABELV $108
line 122
;121:		else
;122:		{
line 123
;123:			client->ps.damageType = 0; //pure health
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
CNSTI4 0
ASGNI4
line 124
;124:		}
LABELV $109
LABELV $107
line 125
;125:	}
LABELV $99
line 128
;126:
;127:
;128:	client->ps.damageCount = count;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 4
INDIRF4
CVFI4 4
ASGNI4
line 133
;129:
;130:	//
;131:	// clear totals
;132:	//
;133:	client->damage_blood = 0;
ADDRLP4 0
INDIRP4
CNSTI4 1748
ADDP4
CNSTI4 0
ASGNI4
line 134
;134:	client->damage_armor = 0;
ADDRLP4 0
INDIRP4
CNSTI4 1744
ADDP4
CNSTI4 0
ASGNI4
line 135
;135:	client->damage_knockback = 0;
ADDRLP4 0
INDIRP4
CNSTI4 1752
ADDP4
CNSTI4 0
ASGNI4
line 136
;136:}
LABELV $89
endproc P_DamageFeedback 48 12
export P_WorldEffects
proc P_WorldEffects 40 32
line 147
;137:
;138:
;139:
;140:/*
;141:=============
;142:P_WorldEffects
;143:
;144:Check for lava / slime contents and drowning
;145:=============
;146:*/
;147:void P_WorldEffects( gentity_t *ent ) {
line 151
;148:	qboolean	envirosuit;
;149:	int			waterlevel;
;150:
;151:	if ( ent->client->noclip ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
CNSTI4 0
EQI4 $111
line 152
;152:		ent->client->airOutTime = level.time + 12000;	// don't need air
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1824
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 12000
ADDI4
ASGNI4
line 153
;153:		return;
ADDRGP4 $110
JUMPV
LABELV $111
line 156
;154:	}
;155:
;156:	waterlevel = ent->waterlevel;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
INDIRI4
ASGNI4
line 158
;157:
;158:	envirosuit = ent->client->ps.powerups[PW_BATTLESUIT] > level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 352
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $116
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $117
JUMPV
LABELV $116
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $117
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 163
;159:
;160:	//
;161:	// check for drowning
;162:	//
;163:	if ( waterlevel == 3 ) {
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $118
line 165
;164:		// envirosuit give air
;165:		if ( envirosuit ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $120
line 166
;166:			ent->client->airOutTime = level.time + 10000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1824
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10000
ADDI4
ASGNI4
line 167
;167:		}
LABELV $120
line 170
;168:
;169:		// if out of air, start drowning
;170:		if ( ent->client->airOutTime < level.time) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1824
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $119
line 172
;171:			// drown!
;172:			ent->client->airOutTime += 1000;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1824
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 173
;173:			if ( ent->health > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
LEI4 $119
line 175
;174:				// take more damage the longer underwater
;175:				ent->damage += 2;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 176
;176:				if (ent->damage > 15)
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
CNSTI4 15
LEI4 $128
line 177
;177:					ent->damage = 15;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 15
ASGNI4
LABELV $128
line 180
;178:
;179:				// play a gurp sound instead of a normal pain sound
;180:				if (ent->health <= ent->damage) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
GTI4 $130
line 181
;181:					G_Sound(ent, CHAN_VOICE, G_SoundIndex(/*"*drown.wav"*/"sound/player/gurp1.wav"));
ADDRGP4 $132
ARGP4
ADDRLP4 24
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 182
;182:				} else if (rand()&1) {
ADDRGP4 $131
JUMPV
LABELV $130
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $133
line 183
;183:					G_Sound(ent, CHAN_VOICE, G_SoundIndex("sound/player/gurp1.wav"));
ADDRGP4 $132
ARGP4
ADDRLP4 28
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 184
;184:				} else {
ADDRGP4 $134
JUMPV
LABELV $133
line 185
;185:					G_Sound(ent, CHAN_VOICE, G_SoundIndex("sound/player/gurp2.wav"));
ADDRGP4 $135
ARGP4
ADDRLP4 28
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 186
;186:				}
LABELV $134
LABELV $131
line 189
;187:
;188:				// don't play a normal pain sound
;189:				ent->pain_debounce_time = level.time + 200;
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 191
;190:
;191:				G_Damage (ent, NULL, NULL, NULL, NULL, 
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
CNSTP4 0
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
CNSTP4 0
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 29
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 193
;192:					ent->damage, DAMAGE_NO_ARMOR, MOD_WATER);
;193:			}
line 194
;194:		}
line 195
;195:	} else {
ADDRGP4 $119
JUMPV
LABELV $118
line 196
;196:		ent->client->airOutTime = level.time + 12000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1824
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 12000
ADDI4
ASGNI4
line 197
;197:		ent->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
CNSTI4 2
ASGNI4
line 198
;198:	}
LABELV $119
line 203
;199:
;200:	//
;201:	// check for sizzle damage (move to pmove?)
;202:	//
;203:	if (waterlevel && 
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $138
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 131074
BANDI4
ADDRLP4 12
INDIRI4
EQI4 $138
line 204
;204:		(ent->watertype&(CONTENTS_LAVA|CONTENTS_SLIME)) ) {
line 205
;205:		if (ent->health > 0
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
LEI4 $140
ADDRLP4 16
INDIRP4
CNSTI4 664
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GTI4 $140
line 206
;206:			&& ent->pain_debounce_time <= level.time	) {
line 208
;207:
;208:			if ( envirosuit ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $143
line 209
;209:				G_AddEvent( ent, EV_POWERUP_BATTLESUIT, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 83
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 210
;210:			} else {
ADDRGP4 $144
JUMPV
LABELV $143
line 211
;211:				if (ent->watertype & CONTENTS_LAVA) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $145
line 212
;212:					G_Damage (ent, NULL, NULL, NULL, NULL, 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
CNSTI4 30
ADDRLP4 0
INDIRI4
MULI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 31
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 214
;213:						30*waterlevel, 0, MOD_LAVA);
;214:				}
LABELV $145
line 216
;215:
;216:				if (ent->watertype & CONTENTS_SLIME) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $147
line 217
;217:					G_Damage (ent, NULL, NULL, NULL, NULL, 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
CNSTI4 10
ADDRLP4 0
INDIRI4
MULI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 219
;218:						10*waterlevel, 0, MOD_SLIME);
;219:				}
LABELV $147
line 220
;220:			}
LABELV $144
line 221
;221:		}
LABELV $140
line 222
;222:	}
LABELV $138
line 223
;223:}
LABELV $110
endproc P_WorldEffects 40 32
export DoImpact
proc DoImpact 96 32
line 232
;224:
;225:
;226:
;227:
;228:
;229://==============================================================
;230:extern void G_ApplyKnockback( gentity_t *targ, vec3_t newDir, float knockback );
;231:void DoImpact( gentity_t *self, gentity_t *other, qboolean damageSelf )
;232:{
line 237
;233:	float magnitude, my_mass;
;234:	vec3_t	velocity;
;235:	int cont;
;236:
;237:	if( self->client )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $150
line 238
;238:	{
line 239
;239:		VectorCopy( self->client->ps.velocity, velocity );
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRB
ASGNB 12
line 240
;240:		my_mass = self->mass;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ASGNF4
line 241
;241:	}
ADDRGP4 $151
JUMPV
LABELV $150
line 243
;242:	else 
;243:	{
line 244
;244:		VectorCopy( self->s.pos.trDelta, velocity );
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 245
;245:		if ( self->s.pos.trType == TR_GRAVITY )
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 5
NEI4 $152
line 246
;246:		{
line 247
;247:			velocity[2] -= 0.25f * g_gravity.value;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1048576000
ADDRGP4 g_gravity+8
INDIRF4
MULF4
SUBF4
ASGNF4
line 248
;248:		}
LABELV $152
line 249
;249:		if( !self->mass )
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
CNSTF4 0
NEF4 $156
line 250
;250:		{
line 251
;251:			my_mass = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 252
;252:		}
ADDRGP4 $157
JUMPV
LABELV $156
line 253
;253:		else if ( self->mass <= 10 )
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
CNSTF4 1092616192
GTF4 $158
line 254
;254:		{
line 255
;255:			my_mass = 10;
ADDRLP4 16
CNSTF4 1092616192
ASGNF4
line 256
;256:		}
ADDRGP4 $159
JUMPV
LABELV $158
line 258
;257:		else
;258:		{
line 259
;259:			my_mass = self->mass;///10;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ASGNF4
line 260
;260:		}
LABELV $159
LABELV $157
line 261
;261:	}
LABELV $151
line 263
;262:
;263:	magnitude = VectorLength( velocity ) * my_mass / 10;
ADDRLP4 4
ARGP4
ADDRLP4 24
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
ASGNF4
line 276
;264:
;265:	/*
;266:	if(pointcontents(self.absmax)==CONTENT_WATER)//FIXME: or other watertypes
;267:		magnitude/=3;							//water absorbs 2/3 velocity
;268:
;269:	if(self.classname=="barrel"&&self.aflag)//rolling barrels are made for impacts!
;270:		magnitude*=3;
;271:
;272:	if(self.frozen>0&&magnitude<300&&self.flags&FL_ONGROUND&&loser==world&&self.velocity_z<-20&&self.last_onground+0.3<time)
;273:		magnitude=300;
;274:	*/
;275:
;276:	if ( !self->client || self->client->ps.lastOnGround+300<level.time || ( self->client->ps.lastOnGround+100 < level.time && other->material >= MAT_GLASS ) )
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $165
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 500
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 300
ADDI4
ADDRGP4 level+32
INDIRI4
LTI4 $165
ADDRLP4 32
INDIRI4
CNSTI4 100
ADDI4
ADDRGP4 level+32
INDIRI4
GEI4 $160
ADDRFP4 4
INDIRP4
CNSTI4 684
ADDP4
INDIRI4
CNSTI4 1
LTI4 $160
LABELV $165
line 277
;277:	{
line 279
;278:		vec3_t dir1, dir2;
;279:		float force = 0, dot;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 281
;280:
;281:		if ( other->material >= MAT_GLASS )
ADDRFP4 4
INDIRP4
CNSTI4 684
ADDP4
INDIRI4
CNSTI4 1
LTI4 $166
line 282
;282:			magnitude *= 2;
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
LABELV $166
line 285
;283:
;284:		//damage them
;285:		if ( magnitude >= 100 && other->s.number < ENTITYNUM_WORLD )
ADDRLP4 0
INDIRF4
CNSTF4 1120403456
LTF4 $168
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 1022
GEI4 $168
line 286
;286:		{
line 287
;287:			VectorCopy( velocity, dir1 );
ADDRLP4 52
ADDRLP4 4
INDIRB
ASGNB 12
line 288
;288:			VectorNormalize( dir1 );
ADDRLP4 52
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 289
;289:			if( VectorCompare( other->r.currentOrigin, vec3_origin ) )
ADDRFP4 4
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 68
ADDRGP4 VectorCompare
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $170
line 290
;290:			{//a brush with no origin
line 291
;291:				VectorCopy ( dir1, dir2 );
ADDRLP4 40
ADDRLP4 52
INDIRB
ASGNB 12
line 292
;292:			}
ADDRGP4 $171
JUMPV
LABELV $170
line 294
;293:			else
;294:			{
line 295
;295:				VectorSubtract( other->r.currentOrigin, self->r.currentOrigin, dir2 );
ADDRLP4 72
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
CNSTI4 368
ASGNI4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 72
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84
CNSTI4 372
ASGNI4
ADDRLP4 40+4
ADDRLP4 72
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 88
CNSTI4 376
ASGNI4
ADDRLP4 40+8
ADDRFP4 4
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 296
;296:				VectorNormalize( dir2 );
ADDRLP4 40
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 297
;297:			}
LABELV $171
line 299
;298:
;299:			dot = DotProduct( dir1, dir2 );
ADDRLP4 64
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 40+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 40+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 301
;300:
;301:			if ( dot >= 0.2 )
ADDRLP4 64
INDIRF4
CNSTF4 1045220557
LTF4 $178
line 302
;302:			{
line 303
;303:				force = dot;
ADDRLP4 36
ADDRLP4 64
INDIRF4
ASGNF4
line 304
;304:			}
ADDRGP4 $179
JUMPV
LABELV $178
line 306
;305:			else
;306:			{
line 307
;307:				force = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 308
;308:			}
LABELV $179
line 310
;309:
;310:			force *= (magnitude/50);
ADDRLP4 36
ADDRLP4 36
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1112014848
DIVF4
MULF4
ASGNF4
line 312
;311:
;312:			cont = trap_PointContents( other->r.absmax, other->s.number );
ADDRLP4 72
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 356
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 76
INDIRI4
ASGNI4
line 313
;313:			if( (cont&CONTENTS_WATER) )//|| (self.classname=="barrel"&&self.aflag))//FIXME: or other watertypes
ADDRLP4 20
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $180
line 314
;314:			{
line 315
;315:				force /= 3;							//water absorbs 2/3 velocity
ADDRLP4 36
ADDRLP4 36
INDIRF4
CNSTF4 1077936128
DIVF4
ASGNF4
line 316
;316:			}
LABELV $180
line 323
;317:
;318:			/*
;319:			if(self.frozen>0&&force>10)
;320:				force=10;
;321:			*/
;322:
;323:			if( ( force >= 1 && other->s.number != 0 ) || force >= 10)
ADDRLP4 36
INDIRF4
CNSTF4 1065353216
LTF4 $185
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $184
LABELV $185
ADDRLP4 36
INDIRF4
CNSTF4 1092616192
LTF4 $182
LABELV $184
line 324
;324:			{
line 332
;325:	/*			
;326:				dprint("Damage other (");
;327:				dprint(loser.classname);
;328:				dprint("): ");
;329:				dprint(ftos(force));
;330:				dprint("\n");
;331:	*/
;332:				if ( other->r.svFlags & SVF_GLASS_BRUSH )
ADDRFP4 4
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 134217728
BANDI4
CNSTI4 0
EQI4 $186
line 333
;333:				{
line 334
;334:					other->splashRadius = (float)(self->r.maxs[0] - self->r.mins[0])/4.0f;
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 4
INDIRP4
CNSTI4 700
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 328
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 316
ADDP4
INDIRF4
SUBF4
CNSTF4 1082130432
DIVF4
CVFI4 4
ASGNI4
line 335
;335:				}
LABELV $186
line 336
;336:				if ( other->takedamage )
ADDRFP4 4
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $188
line 337
;337:				{
line 338
;338:					G_Damage( other, self, self, velocity, self->r.currentOrigin, force, DAMAGE_NO_ARMOR, MOD_CRUSH);//FIXME: MOD_IMPACT
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 80
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 36
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 339
;339:				}
ADDRGP4 $189
JUMPV
LABELV $188
line 341
;340:				else
;341:				{
line 342
;342:					G_ApplyKnockback( other, dir2, force );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 36
INDIRF4
ARGF4
ADDRGP4 G_ApplyKnockback
CALLV
pop
line 343
;343:				}
LABELV $189
line 344
;344:			}
LABELV $182
line 345
;345:		}
LABELV $168
line 347
;346:
;347:		if ( damageSelf && self->takedamage )
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRFP4 8
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $190
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $190
line 348
;348:		{
line 351
;349:			//Now damage me
;350:			//FIXME: more lenient falling damage, especially for when driving a vehicle
;351:			if ( self->client && self->client->ps.fd.forceJumpZStart )
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $192
ADDRLP4 72
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
CNSTF4 0
EQF4 $192
line 352
;352:			{//we were force-jumping
line 353
;353:				if ( self->r.currentOrigin[2] >= self->client->ps.fd.forceJumpZStart )
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 376
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
LTF4 $194
line 354
;354:				{//we landed at same height or higher than we landed
line 355
;355:					magnitude = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 356
;356:				}
ADDRGP4 $195
JUMPV
LABELV $194
line 358
;357:				else
;358:				{//FIXME: take off some of it, at least?
line 359
;359:					magnitude = (self->client->ps.fd.forceJumpZStart-self->r.currentOrigin[2])/3;
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 376
ADDP4
INDIRF4
SUBF4
CNSTF4 1077936128
DIVF4
ASGNF4
line 360
;360:				}
LABELV $195
line 361
;361:			}
LABELV $192
line 363
;362:			//if(self.classname!="monster_mezzoman"&&self.netname!="spider")//Cats always land on their feet
;363:				if( ( magnitude >= 100 + self->health && self->s.number != 0 && self->s.weapon != WP_SABER ) || ( magnitude >= 700 ) )//&& self.safe_time < level.time ))//health here is used to simulate structural integrity
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
LTF4 $200
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $200
ADDRLP4 76
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 2
NEI4 $198
LABELV $200
ADDRLP4 0
INDIRF4
CNSTF4 1143930880
LTF4 $196
LABELV $198
line 364
;364:				{
line 365
;365:					if ( (self->s.weapon == WP_SABER || self->s.number == 0) && self->client && self->client->ps.groundEntityNum < ENTITYNUM_NONE && magnitude < 1000 )
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 2
EQI4 $203
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $201
LABELV $203
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $201
ADDRLP4 84
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
GEI4 $201
ADDRLP4 0
INDIRF4
CNSTF4 1148846080
GEF4 $201
line 366
;366:					{//players and jedi take less impact damage
line 368
;367:						//allow for some lenience on high falls
;368:						magnitude /= 2;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 375
;369:						/*
;370:						if ( self.absorb_time >= time )//crouching on impact absorbs 1/2 the damage
;371:						{
;372:							magnitude/=2;
;373:						}
;374:						*/
;375:					}
LABELV $201
line 376
;376:					magnitude /= 40;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1109393408
DIVF4
ASGNF4
line 377
;377:					magnitude = magnitude - force/2;//If damage other, subtract half of that damage off of own injury
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRF4
CNSTF4 1073741824
DIVF4
SUBF4
ASGNF4
line 378
;378:					if ( magnitude >= 1 )
ADDRLP4 0
INDIRF4
CNSTF4 1065353216
LTF4 $204
line 379
;379:					{
line 392
;380:		//FIXME: Put in a thingtype impact sound function
;381:		/*					
;382:						dprint("Damage self (");
;383:						dprint(self.classname);
;384:						dprint("): ");
;385:						dprint(ftos(magnitude));
;386:						dprint("\n");
;387:		*/
;388:						/*
;389:						if ( self.classname=="player_sheep "&& self.flags&FL_ONGROUND && self.velocity_z > -50 )
;390:							return;
;391:						*/
;392:						G_Damage( self, NULL, NULL, NULL, self->r.currentOrigin, magnitude/2, DAMAGE_NO_ARMOR, MOD_FALLING );//FIXME: MOD_IMPACT
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 34
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 393
;393:					}
LABELV $204
line 394
;394:				}
LABELV $196
line 395
;395:		}
LABELV $190
line 406
;396:
;397:		//FIXME: slow my velocity some?
;398:
;399:		// NOTENOTE We don't use lastimpact as of yet
;400://		self->lastImpact = level.time;
;401:
;402:		/*
;403:		if(self.flags&FL_ONGROUND)
;404:			self.last_onground=time;
;405:		*/
;406:	}
LABELV $160
line 407
;407:}
LABELV $149
endproc DoImpact 96 32
export G_SetClientSound
proc G_SetClientSound 8 0
line 414
;408:
;409:/*
;410:===============
;411:G_SetClientSound
;412:===============
;413:*/
;414:void G_SetClientSound( gentity_t *ent ) {
line 415
;415:	if (ent->waterlevel && (ent->watertype&(CONTENTS_LAVA|CONTENTS_SLIME)) ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 748
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $207
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 131074
BANDI4
ADDRLP4 4
INDIRI4
EQI4 $207
line 416
;416:		ent->client->ps.loopSound = level.snd_fry;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 level+220
INDIRI4
ASGNI4
line 417
;417:	} else {
ADDRGP4 $208
JUMPV
LABELV $207
line 418
;418:		ent->client->ps.loopSound = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 476
ADDP4
CNSTI4 0
ASGNI4
line 419
;419:	}
LABELV $208
line 420
;420:}
LABELV $206
endproc G_SetClientSound 8 0
export ClientImpacts
proc ClientImpacts 1100 12
line 431
;421:
;422:
;423:
;424://==============================================================
;425:
;426:/*
;427:==============
;428:ClientImpacts
;429:==============
;430:*/
;431:void ClientImpacts( gentity_t *ent, pmove_t *pm ) {
line 436
;432:	int		i, j;
;433:	trace_t	trace;
;434:	gentity_t	*other;
;435:
;436:	memset( &trace, 0, sizeof( trace ) );
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1080
ARGI4
ADDRGP4 memset
CALLP4
pop
line 437
;437:	for (i=0 ; i<pm->numtouch ; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $214
JUMPV
LABELV $211
line 438
;438:		for (j=0 ; j<i ; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $218
JUMPV
LABELV $215
line 439
;439:			if (pm->touchents[j] == pm->touchents[i] ) {
ADDRLP4 1092
CNSTI4 2
ASGNI4
ADDRLP4 1096
ADDRFP4 4
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 1092
INDIRI4
LSHI4
ADDRLP4 1096
INDIRP4
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 1092
INDIRI4
LSHI4
ADDRLP4 1096
INDIRP4
ADDP4
INDIRI4
NEI4 $219
line 440
;440:				break;
ADDRGP4 $217
JUMPV
LABELV $219
line 442
;441:			}
;442:		}
LABELV $216
line 438
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $218
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $215
LABELV $217
line 443
;443:		if (j != i) {
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $221
line 444
;444:			continue;	// duplicated
ADDRGP4 $212
JUMPV
LABELV $221
line 446
;445:		}
;446:		other = &g_entities[ pm->touchents[i] ];
ADDRLP4 8
CNSTI4 852
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 56
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 448
;447:
;448:		if ( ( ent->r.svFlags & SVF_BOT ) && ( ent->touch ) ) {
ADDRLP4 1092
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1092
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $223
ADDRLP4 1092
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $223
line 449
;449:			ent->touch( ent, other, &trace );
ADDRLP4 1096
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1096
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CALLV
pop
line 450
;450:		}
LABELV $223
line 452
;451:
;452:		if ( !other->touch ) {
ADDRLP4 8
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $225
line 453
;453:			continue;
ADDRGP4 $212
JUMPV
LABELV $225
line 456
;454:		}
;455:
;456:		other->touch( other, ent, &trace );
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CALLV
pop
line 457
;457:	}
LABELV $212
line 437
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $214
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
LTI4 $211
line 459
;458:
;459:}
LABELV $210
endproc ClientImpacts 1100 12
data
align 4
LABELV $228
byte 4 1109393408
byte 4 1109393408
byte 4 1112539136
export G_TouchTriggers
code
proc G_TouchTriggers 5264 16
line 469
;460:
;461:/*
;462:============
;463:G_TouchTriggers
;464:
;465:Find all trigger entities that ent's current position touches.
;466:Spectators will only interact with teleporters.
;467:============
;468:*/
;469:void	G_TouchTriggers( gentity_t *ent ) {
line 477
;470:	int			i, num;
;471:	int			touch[MAX_GENTITIES];
;472:	gentity_t	*hit;
;473:	trace_t		trace;
;474:	vec3_t		mins, maxs;
;475:	static vec3_t	range = { 40, 40, 52 };
;476:
;477:	if ( !ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $229
line 478
;478:		return;
ADDRGP4 $227
JUMPV
LABELV $229
line 482
;479:	}
;480:
;481:	// dead clients don't activate triggers!
;482:	if ( ent->client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $231
line 483
;483:		return;
ADDRGP4 $227
JUMPV
LABELV $231
line 486
;484:	}
;485:
;486:	VectorSubtract( ent->client->ps.origin, range, mins );
ADDRLP4 5212
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1088
ADDRLP4 5212
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRGP4 $228
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1088+4
ADDRLP4 5212
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRGP4 $228+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1088+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRGP4 $228+8
INDIRF4
SUBF4
ASGNF4
line 487
;487:	VectorAdd( ent->client->ps.origin, range, maxs );
ADDRLP4 5216
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1100
ADDRLP4 5216
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRGP4 $228
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 5216
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRGP4 $228+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRGP4 $228+8
INDIRF4
ADDF4
ASGNF4
line 489
;488:
;489:	num = trap_EntitiesInBox( mins, maxs, touch, MAX_GENTITIES );
ADDRLP4 1088
ARGP4
ADDRLP4 1100
ARGP4
ADDRLP4 1116
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 5220
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 1112
ADDRLP4 5220
INDIRI4
ASGNI4
line 492
;490:
;491:	// can't use ent->r.absmin, because that has a one unit pad
;492:	VectorAdd( ent->client->ps.origin, ent->r.mins, mins );
ADDRLP4 5224
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5228
ADDRLP4 5224
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1088
ADDRLP4 5228
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 5224
INDIRP4
CNSTI4 316
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1088+4
ADDRLP4 5228
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 5224
INDIRP4
CNSTI4 320
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 5232
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1088+8
ADDRLP4 5232
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 5232
INDIRP4
CNSTI4 324
ADDP4
INDIRF4
ADDF4
ASGNF4
line 493
;493:	VectorAdd( ent->client->ps.origin, ent->r.maxs, maxs );
ADDRLP4 5236
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5240
ADDRLP4 5236
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1100
ADDRLP4 5240
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 5236
INDIRP4
CNSTI4 328
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 5240
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 5236
INDIRP4
CNSTI4 332
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 5244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1100+8
ADDRLP4 5244
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 5244
INDIRP4
CNSTI4 336
ADDP4
INDIRF4
ADDF4
ASGNF4
line 495
;494:
;495:	for ( i=0 ; i<num ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $248
JUMPV
LABELV $245
line 496
;496:		hit = &g_entities[touch[i]];
ADDRLP4 0
CNSTI4 852
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1116
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 498
;497:
;498:		if ( !hit->touch && !ent->touch ) {
ADDRLP4 5248
CNSTI4 648
ASGNI4
ADDRLP4 5252
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
ADDRLP4 5248
INDIRI4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 5252
INDIRU4
NEU4 $249
ADDRFP4 0
INDIRP4
ADDRLP4 5248
INDIRI4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 5252
INDIRU4
NEU4 $249
line 499
;499:			continue;
ADDRGP4 $246
JUMPV
LABELV $249
line 501
;500:		}
;501:		if ( !( hit->r.contents & CONTENTS_TRIGGER ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $251
line 502
;502:			continue;
ADDRGP4 $246
JUMPV
LABELV $251
line 506
;503:		}
;504:
;505:		// ignore most entities if a spectator
;506:		if ( ent->client->sess.sessionTeam == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
NEI4 $253
line 507
;507:			if ( hit->s.eType != ET_TELEPORT_TRIGGER &&
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 11
EQI4 $255
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 Touch_DoorTrigger
CVPU4 4
EQU4 $255
line 510
;508:				// this is ugly but adding a new ET_? type will
;509:				// most likely cause network incompatibilities
;510:				hit->touch != Touch_DoorTrigger) {
line 511
;511:				continue;
ADDRGP4 $246
JUMPV
LABELV $255
line 513
;512:			}
;513:		}
LABELV $253
line 517
;514:
;515:		// use seperate code for determining if an item is picked up
;516:		// so you don't have to actually contact its bounding box
;517:		if ( hit->s.eType == ET_ITEM ) {
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $257
line 518
;518:			if ( !BG_PlayerTouchesItem( &ent->client->ps, &hit->s, level.time ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 5256
ADDRGP4 BG_PlayerTouchesItem
CALLI4
ASGNI4
ADDRLP4 5256
INDIRI4
CNSTI4 0
NEI4 $258
line 519
;519:				continue;
ADDRGP4 $246
JUMPV
line 521
;520:			}
;521:		} else {
LABELV $257
line 522
;522:			if ( !trap_EntityContact( mins, maxs, hit ) ) {
ADDRLP4 1088
ARGP4
ADDRLP4 1100
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 5256
ADDRGP4 trap_EntityContact
CALLI4
ASGNI4
ADDRLP4 5256
INDIRI4
CNSTI4 0
NEI4 $262
line 523
;523:				continue;
ADDRGP4 $246
JUMPV
LABELV $262
line 525
;524:			}
;525:		}
LABELV $258
line 527
;526:
;527:		memset( &trace, 0, sizeof(trace) );
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1080
ARGI4
ADDRGP4 memset
CALLP4
pop
line 529
;528:
;529:		if ( hit->touch ) {
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $264
line 530
;530:			hit->touch (hit, ent, &trace);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CALLV
pop
line 531
;531:		}
LABELV $264
line 533
;532:
;533:		if ( ( ent->r.svFlags & SVF_BOT ) && ( ent->touch ) ) {
ADDRLP4 5256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5256
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $266
ADDRLP4 5256
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $266
line 534
;534:			ent->touch( ent, hit, &trace );
ADDRLP4 5260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5260
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 5260
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CALLV
pop
line 535
;535:		}
LABELV $266
line 536
;536:	}
LABELV $246
line 495
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $248
ADDRLP4 4
INDIRI4
ADDRLP4 1112
INDIRI4
LTI4 $245
line 539
;537:
;538:	// if we didn't touch a jump pad this pmove frame
;539:	if ( ent->client->ps.jumppad_frame != ent->client->ps.pmove_framecount ) {
ADDRLP4 5248
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 5248
INDIRP4
CNSTI4 492
ADDP4
INDIRI4
ADDRLP4 5248
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
EQI4 $268
line 540
;540:		ent->client->ps.jumppad_frame = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 0
ASGNI4
line 541
;541:		ent->client->ps.jumppad_ent = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 480
ADDP4
CNSTI4 0
ASGNI4
line 542
;542:	}
LABELV $268
line 543
;543:}
LABELV $227
endproc G_TouchTriggers 5264 16
lit
align 4
LABELV $271
byte 4 1109393408
byte 4 1109393408
byte 4 1112539136
export G_MoverTouchPushTriggers
code
proc G_MoverTouchPushTriggers 5328 16
line 555
;544:
;545:
;546:/*
;547:============
;548:G_MoverTouchTriggers
;549:
;550:Find all trigger entities that ent's current position touches.
;551:Spectators will only interact with teleporters.
;552:============
;553:*/
;554:void G_MoverTouchPushTriggers( gentity_t *ent, vec3_t oldOrg ) 
;555:{
line 562
;556:	int			i, num;
;557:	float		step, stepSize, dist;
;558:	int			touch[MAX_GENTITIES];
;559:	gentity_t	*hit;
;560:	trace_t		trace;
;561:	vec3_t		mins, maxs, dir, size, checkSpot;
;562:	const vec3_t	range = { 40, 40, 52 };
ADDRLP4 5224
ADDRGP4 $271
INDIRB
ASGNB 12
line 565
;563:
;564:	// non-moving movers don't hit triggers!
;565:	if ( !VectorLengthSquared( ent->s.pos.trDelta ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 5272
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 5272
INDIRF4
CNSTF4 0
NEF4 $272
line 566
;566:	{
line 567
;567:		return;
ADDRGP4 $270
JUMPV
LABELV $272
line 570
;568:	}
;569:
;570:	VectorSubtract( ent->r.mins, ent->r.maxs, size );
ADDRLP4 5276
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5260
ADDRLP4 5276
INDIRP4
CNSTI4 316
ADDP4
INDIRF4
ADDRLP4 5276
INDIRP4
CNSTI4 328
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 5260+4
ADDRLP4 5276
INDIRP4
CNSTI4 320
ADDP4
INDIRF4
ADDRLP4 5276
INDIRP4
CNSTI4 332
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 5280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5260+8
ADDRLP4 5280
INDIRP4
CNSTI4 324
ADDP4
INDIRF4
ADDRLP4 5280
INDIRP4
CNSTI4 336
ADDP4
INDIRF4
SUBF4
ASGNF4
line 571
;571:	stepSize = VectorLength( size );
ADDRLP4 5260
ARGP4
ADDRLP4 5284
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 5252
ADDRLP4 5284
INDIRF4
ASGNF4
line 572
;572:	if ( stepSize < 1 )
ADDRLP4 5252
INDIRF4
CNSTF4 1065353216
GEF4 $276
line 573
;573:	{
line 574
;574:		stepSize = 1;
ADDRLP4 5252
CNSTF4 1065353216
ASGNF4
line 575
;575:	}
LABELV $276
line 577
;576:
;577:	VectorSubtract( ent->r.currentOrigin, oldOrg, dir );
ADDRLP4 5288
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 5292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 5240
ADDRLP4 5288
INDIRP4
CNSTI4 368
ADDP4
INDIRF4
ADDRLP4 5292
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 5240+4
ADDRLP4 5288
INDIRP4
CNSTI4 372
ADDP4
INDIRF4
ADDRLP4 5292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 5240+8
ADDRFP4 0
INDIRP4
CNSTI4 376
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 578
;578:	dist = VectorNormalize( dir );
ADDRLP4 5240
ARGP4
ADDRLP4 5296
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 5256
ADDRLP4 5296
INDIRF4
ASGNF4
line 579
;579:	for ( step = 0; step <= dist; step += stepSize )
ADDRLP4 5236
CNSTF4 0
ASGNF4
ADDRGP4 $283
JUMPV
LABELV $280
line 580
;580:	{
line 581
;581:		VectorMA( ent->r.currentOrigin, step, dir, checkSpot );
ADDRLP4 5300
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1112
ADDRLP4 5300
INDIRP4
CNSTI4 368
ADDP4
INDIRF4
ADDRLP4 5240
INDIRF4
ADDRLP4 5236
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1112+4
ADDRLP4 5300
INDIRP4
CNSTI4 372
ADDP4
INDIRF4
ADDRLP4 5240+4
INDIRF4
ADDRLP4 5236
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1112+8
ADDRFP4 0
INDIRP4
CNSTI4 376
ADDP4
INDIRF4
ADDRLP4 5240+8
INDIRF4
ADDRLP4 5236
INDIRF4
MULF4
ADDF4
ASGNF4
line 582
;582:		VectorSubtract( checkSpot, range, mins );
ADDRLP4 1088
ADDRLP4 1112
INDIRF4
ADDRLP4 5224
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1088+4
ADDRLP4 1112+4
INDIRF4
ADDRLP4 5224+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1088+8
ADDRLP4 1112+8
INDIRF4
ADDRLP4 5224+8
INDIRF4
SUBF4
ASGNF4
line 583
;583:		VectorAdd( checkSpot, range, maxs );
ADDRLP4 1100
ADDRLP4 1112
INDIRF4
ADDRLP4 5224
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 1112+4
INDIRF4
ADDRLP4 5224+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+8
ADDRLP4 1112+8
INDIRF4
ADDRLP4 5224+8
INDIRF4
ADDF4
ASGNF4
line 585
;584:
;585:		num = trap_EntitiesInBox( mins, maxs, touch, MAX_GENTITIES );
ADDRLP4 1088
ARGP4
ADDRLP4 1100
ARGP4
ADDRLP4 1128
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 5308
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 1124
ADDRLP4 5308
INDIRI4
ASGNI4
line 588
;586:
;587:		// can't use ent->r.absmin, because that has a one unit pad
;588:		VectorAdd( checkSpot, ent->r.mins, mins );
ADDRLP4 5312
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1088
ADDRLP4 1112
INDIRF4
ADDRLP4 5312
INDIRP4
CNSTI4 316
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1088+4
ADDRLP4 1112+4
INDIRF4
ADDRLP4 5312
INDIRP4
CNSTI4 320
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1088+8
ADDRLP4 1112+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 324
ADDP4
INDIRF4
ADDF4
ASGNF4
line 589
;589:		VectorAdd( checkSpot, ent->r.maxs, maxs );
ADDRLP4 5316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1100
ADDRLP4 1112
INDIRF4
ADDRLP4 5316
INDIRP4
CNSTI4 328
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 1112+4
INDIRF4
ADDRLP4 5316
INDIRP4
CNSTI4 332
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 1100+8
ADDRLP4 1112+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 336
ADDP4
INDIRF4
ADDF4
ASGNF4
line 591
;590:
;591:		for ( i=0 ; i<num ; i++ ) 
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $311
JUMPV
LABELV $308
line 592
;592:		{
line 593
;593:			hit = &g_entities[touch[i]];
ADDRLP4 0
CNSTI4 852
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1128
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 595
;594:
;595:			if ( hit->s.eType != ET_PUSH_TRIGGER )
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 10
EQI4 $312
line 596
;596:			{
line 597
;597:				continue;
ADDRGP4 $309
JUMPV
LABELV $312
line 600
;598:			}
;599:
;600:			if ( hit->touch == NULL ) 
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $314
line 601
;601:			{
line 602
;602:				continue;
ADDRGP4 $309
JUMPV
LABELV $314
line 605
;603:			}
;604:
;605:			if ( !( hit->r.contents & CONTENTS_TRIGGER ) ) 
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $316
line 606
;606:			{
line 607
;607:				continue;
ADDRGP4 $309
JUMPV
LABELV $316
line 611
;608:			}
;609:
;610:
;611:			if ( !trap_EntityContact( mins, maxs, hit ) ) 
ADDRLP4 1088
ARGP4
ADDRLP4 1100
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 5320
ADDRGP4 trap_EntityContact
CALLI4
ASGNI4
ADDRLP4 5320
INDIRI4
CNSTI4 0
NEI4 $318
line 612
;612:			{
line 613
;613:				continue;
ADDRGP4 $309
JUMPV
LABELV $318
line 616
;614:			}
;615:
;616:			memset( &trace, 0, sizeof(trace) );
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1080
ARGI4
ADDRGP4 memset
CALLP4
pop
line 618
;617:
;618:			if ( hit->touch != NULL ) 
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $320
line 619
;619:			{
line 620
;620:				hit->touch(hit, ent, &trace);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CALLV
pop
line 621
;621:			}
LABELV $320
line 622
;622:		}
LABELV $309
line 591
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $311
ADDRLP4 4
INDIRI4
ADDRLP4 1124
INDIRI4
LTI4 $308
line 623
;623:	}
LABELV $281
line 579
ADDRLP4 5236
ADDRLP4 5236
INDIRF4
ADDRLP4 5252
INDIRF4
ADDF4
ASGNF4
LABELV $283
ADDRLP4 5236
INDIRF4
ADDRLP4 5256
INDIRF4
LEF4 $280
line 624
;624:}
LABELV $270
endproc G_MoverTouchPushTriggers 5328 16
export SpectatorThink
proc SpectatorThink 400 12
line 631
;625:
;626:/*
;627:=================
;628:SpectatorThink
;629:=================
;630:*/
;631:void SpectatorThink( gentity_t *ent, usercmd_t *ucmd ) {
line 635
;632:	pmove_t	pm;
;633:	gclient_t	*client;
;634:
;635:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
line 637
;636:
;637:	if ( client->sess.spectatorState != SPECTATOR_FOLLOW ) {
ADDRLP4 0
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 2
EQI4 $323
line 638
;638:		client->ps.pm_type = PM_SPECTATOR;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 639
;639:		client->ps.speed = 400;	// faster than normal
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 400
ASGNI4
line 640
;640:		client->ps.basespeed = 400;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 400
ASGNI4
line 643
;641:
;642:		// set up for pmove
;643:		memset (&pm, 0, sizeof(pm));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 380
ARGI4
ADDRGP4 memset
CALLP4
pop
line 644
;644:		pm.ps = &client->ps;
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
line 645
;645:		pm.cmd = *ucmd;
ADDRLP4 4+4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 28
line 646
;646:		pm.tracemask = MASK_PLAYERSOLID & ~CONTENTS_BODY;	// spectators can fly through bodies
ADDRLP4 4+32
CNSTI4 17
ASGNI4
line 647
;647:		pm.trace = trap_Trace;
ADDRLP4 4+240
ADDRGP4 trap_Trace
ASGNP4
line 648
;648:		pm.pointcontents = trap_PointContents;
ADDRLP4 4+244
ADDRGP4 trap_PointContents
ASGNP4
line 650
;649:
;650:		pm.animations = NULL;
ADDRLP4 4+224
CNSTP4 0
ASGNP4
line 653
;651:
;652:		// perform a pmove
;653:		Pmove (&pm);
ADDRLP4 4
ARGP4
ADDRGP4 Pmove
CALLV
pop
line 655
;654:		// save results of pmove
;655:		VectorCopy( client->ps.origin, ent->s.origin );
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 657
;656:
;657:		G_TouchTriggers( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_TouchTriggers
CALLV
pop
line 658
;658:		trap_UnlinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 659
;659:	}
LABELV $323
line 661
;660:
;661:	client->oldbuttons = client->buttons;
ADDRLP4 0
INDIRP4
CNSTI4 1724
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ASGNI4
line 662
;662:	client->buttons = ucmd->buttons;
ADDRLP4 0
INDIRP4
CNSTI4 1720
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 665
;663:
;664:	// attack button cycles through spectators
;665:	if ( ( client->buttons & BUTTON_ATTACK ) && ! ( client->oldbuttons & BUTTON_ATTACK ) ) {
ADDRLP4 392
CNSTI4 1
ASGNI4
ADDRLP4 396
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ADDRLP4 392
INDIRI4
BANDI4
ADDRLP4 396
INDIRI4
EQI4 $330
ADDRLP4 0
INDIRP4
CNSTI4 1724
ADDP4
INDIRI4
ADDRLP4 392
INDIRI4
BANDI4
ADDRLP4 396
INDIRI4
NEI4 $330
line 666
;666:		Cmd_FollowCycle_f( ent, 1 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 Cmd_FollowCycle_f
CALLV
pop
line 667
;667:	}
LABELV $330
line 669
;668:
;669:	if (client->sess.spectatorState == SPECTATOR_FOLLOW && (ucmd->upmove > 0))
ADDRLP4 0
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 2
NEI4 $332
ADDRFP4 4
INDIRP4
CNSTI4 26
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $332
line 670
;670:	{ //jump now removes you from follow mode
line 671
;671:		StopFollowing(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 StopFollowing
CALLV
pop
line 672
;672:	}
LABELV $332
line 673
;673:}
LABELV $322
endproc SpectatorThink 400 12
export ClientInactivityTimer
proc ClientInactivityTimer 12 8
line 684
;674:
;675:
;676:
;677:/*
;678:=================
;679:ClientInactivityTimer
;680:
;681:Returns qfalse if the client is dropped
;682:=================
;683:*/
;684:qboolean ClientInactivityTimer( gclient_t *client ) {
line 685
;685:	if ( ! g_inactivity.integer ) {
ADDRGP4 g_inactivity+12
INDIRI4
CNSTI4 0
NEI4 $335
line 688
;686:		// give everyone some time, so if the operator sets g_inactivity during
;687:		// gameplay, everyone isn't kicked
;688:		client->inactivityTime = level.time + 60 * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 1812
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 60000
ADDI4
ASGNI4
line 689
;689:		client->inactivityWarning = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1816
ADDP4
CNSTI4 0
ASGNI4
line 690
;690:	} else if ( client->pers.cmd.forwardmove || 
ADDRGP4 $336
JUMPV
LABELV $335
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1408
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
NEI4 $343
ADDRLP4 0
INDIRP4
CNSTI4 1409
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
NEI4 $343
ADDRLP4 0
INDIRP4
CNSTI4 1410
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
NEI4 $343
ADDRLP4 0
INDIRP4
CNSTI4 1400
ADDP4
INDIRI4
CNSTI4 129
BANDI4
ADDRLP4 4
INDIRI4
EQI4 $339
LABELV $343
line 693
;691:		client->pers.cmd.rightmove || 
;692:		client->pers.cmd.upmove ||
;693:		(client->pers.cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)) ) {
line 694
;694:		client->inactivityTime = level.time + g_inactivity.integer * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 1812
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRGP4 g_inactivity+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 695
;695:		client->inactivityWarning = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1816
ADDP4
CNSTI4 0
ASGNI4
line 696
;696:	} else if ( !client->pers.localClient ) {
ADDRGP4 $340
JUMPV
LABELV $339
ADDRFP4 0
INDIRP4
CNSTI4 1412
ADDP4
INDIRI4
CNSTI4 0
NEI4 $346
line 697
;697:		if ( level.time > client->inactivityTime ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1812
ADDP4
INDIRI4
LEI4 $348
line 698
;698:			trap_DropClient( client - level.clients, "Dropped due to inactivity" );
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 level
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2972
DIVI4
ARGI4
ADDRGP4 $351
ARGP4
ADDRGP4 trap_DropClient
CALLV
pop
line 699
;699:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $334
JUMPV
LABELV $348
line 701
;700:		}
;701:		if ( level.time > client->inactivityTime - 10000 && !client->inactivityWarning ) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 1812
ADDP4
INDIRI4
CNSTI4 10000
SUBI4
LEI4 $352
ADDRLP4 8
INDIRP4
CNSTI4 1816
ADDP4
INDIRI4
CNSTI4 0
NEI4 $352
line 702
;702:			client->inactivityWarning = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1816
ADDP4
CNSTI4 1
ASGNI4
line 703
;703:			trap_SendServerCommand( client - level.clients, "cp \"Ten seconds until inactivity drop!\n\"" );
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 level
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2972
DIVI4
ARGI4
ADDRGP4 $355
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 704
;704:		}
LABELV $352
line 705
;705:	}
LABELV $346
LABELV $340
LABELV $336
line 706
;706:	return qtrue;
CNSTI4 1
RETI4
LABELV $334
endproc ClientInactivityTimer 12 8
export ClientTimerActions
proc ClientTimerActions 2108 16
line 718
;707:}
;708:
;709:/*
;710:==================
;711:ClientTimerActions
;712:
;713:Actions that happen once a second
;714:==================
;715:*/
;716://char *Q_stristr(const char *s, const char *find);
;717:void uwRename(gentity_t *player, const char *newname);
;718:void ClientTimerActions( gentity_t *ent, int msec ) {
line 722
;719:	gclient_t	*client;
;720:	char motdWithNewLines[MAX_STRING_CHARS];
;721:	char motdString[MAX_STRING_CHARS];
;722:	int clientNum = ent-g_entities;
ADDRLP4 2052
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ASGNI4
line 724
;723:
;724:	client = ent->client;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
line 725
;725:	client->timeResidual += msec;
ADDRLP4 2056
ADDRLP4 0
INDIRP4
CNSTI4 2880
ADDP4
ASGNP4
ADDRLP4 2056
INDIRP4
ADDRLP4 2056
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $358
JUMPV
LABELV $357
line 728
;726:
;727:	while ( client->timeResidual >= 1000 ) 
;728:	{
line 729
;729:		client->timeResidual -= 1000;
ADDRLP4 2060
ADDRLP4 0
INDIRP4
CNSTI4 2880
ADDP4
ASGNP4
ADDRLP4 2060
INDIRP4
ADDRLP4 2060
INDIRP4
INDIRI4
CNSTI4 1000
SUBI4
ASGNI4
line 732
;730:
;731:		// count down health when over max
;732:		if ( ent->health > client->ps.stats[STAT_MAX_HEALTH] ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $360
line 733
;733:			ent->health--;
ADDRLP4 2064
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 2064
INDIRP4
ADDRLP4 2064
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 734
;734:		}
LABELV $360
line 737
;735:
;736:		// count down armor when over max
;737:		if ( client->ps.stats[STAT_ARMOR] > client->ps.stats[STAT_MAX_HEALTH] ) {
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $362
line 738
;738:			client->ps.stats[STAT_ARMOR]--;
ADDRLP4 2068
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ASGNP4
ADDRLP4 2068
INDIRP4
ADDRLP4 2068
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 739
;739:		}
LABELV $362
line 741
;740:
;741:		if ( cm_autoprotecttime.integer != 0 && client->ps.duelInProgress == qfalse ) {
ADDRLP4 2068
CNSTI4 0
ASGNI4
ADDRGP4 cm_autoprotecttime+12
INDIRI4
ADDRLP4 2068
INDIRI4
EQI4 $364
ADDRLP4 0
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
ADDRLP4 2068
INDIRI4
NEI4 $364
line 742
;742:			if ( client->pers.cmd.forwardmove || client->pers.cmd.rightmove || 
ADDRLP4 2076
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1408
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2076
INDIRI4
NEI4 $371
ADDRLP4 0
INDIRP4
CNSTI4 1409
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2076
INDIRI4
NEI4 $371
ADDRLP4 0
INDIRP4
CNSTI4 1410
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2076
INDIRI4
NEI4 $371
ADDRLP4 0
INDIRP4
CNSTI4 1400
ADDP4
INDIRI4
CNSTI4 129
BANDI4
ADDRLP4 2076
INDIRI4
EQI4 $367
LABELV $371
line 743
;743:				client->pers.cmd.upmove || (client->pers.cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)) ) {
line 744
;744:				client->cmIdleTimer = cm_autoprotecttime.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1844
ADDP4
ADDRGP4 cm_autoprotecttime+12
INDIRI4
ASGNI4
line 745
;745:			}
ADDRGP4 $368
JUMPV
LABELV $367
line 746
;746:			else if ( !client->pers.cmd.forwardmove || !client->pers.cmd.rightmove || 
ADDRLP4 2084
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1408
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2084
INDIRI4
EQI4 $377
ADDRLP4 0
INDIRP4
CNSTI4 1409
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2084
INDIRI4
EQI4 $377
ADDRLP4 0
INDIRP4
CNSTI4 1410
ADDP4
INDIRI1
CVII4 1
ADDRLP4 2084
INDIRI4
EQI4 $377
ADDRLP4 0
INDIRP4
CNSTI4 1400
ADDP4
INDIRI4
CNSTI4 129
BANDI4
ADDRLP4 2084
INDIRI4
NEI4 $373
LABELV $377
line 747
;747:				!client->pers.cmd.upmove || !(client->pers.cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)) ) {
line 748
;748:					if (client->cmIdleTimer == 0) {
ADDRLP4 0
INDIRP4
CNSTI4 1844
ADDP4
INDIRI4
CNSTI4 0
NEI4 $378
line 749
;749:						client->ps.eFlags |= EF_INVULNERABLE;
ADDRLP4 2088
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 2088
INDIRP4
ADDRLP4 2088
INDIRP4
INDIRI4
CNSTI4 67108864
BORI4
ASGNI4
line 750
;750:						client->invulnerableTimer = level.time + Q3_INFINITE;
ADDRLP4 0
INDIRP4
CNSTI4 1700
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 16777216
ADDI4
ASGNI4
line 751
;751:					}
LABELV $378
line 752
;752:					if (client->cmIdleTimer != 0){
ADDRLP4 0
INDIRP4
CNSTI4 1844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $381
line 753
;753:						client->cmIdleTimer--;
ADDRLP4 2088
ADDRLP4 0
INDIRP4
CNSTI4 1844
ADDP4
ASGNP4
ADDRLP4 2088
INDIRP4
ADDRLP4 2088
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 754
;754:					}
LABELV $381
line 755
;755:				}
LABELV $373
LABELV $368
line 756
;756:		}
LABELV $364
line 758
;757:
;758:		if (client->cmClanTimer >= 1 && client->csTimeLeft == 0 && client->pers.amclanreserved == 1 &&
ADDRLP4 2076
CNSTI4 1
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1848
ADDP4
INDIRI4
ADDRLP4 2076
INDIRI4
LTI4 $383
ADDRLP4 2080
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1840
ADDP4
INDIRI4
ADDRLP4 2080
INDIRI4
NEI4 $383
ADDRLP4 0
INDIRP4
CNSTI4 1552
ADDP4
INDIRI4
ADDRLP4 2076
INDIRI4
NEI4 $383
ADDRLP4 2084
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ASGNI4
ADDRLP4 2084
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 2080
INDIRI4
NEI4 $383
ADDRGP4 cm_clanTag+16
INDIRI1
CVII4 1
ADDRLP4 2080
INDIRI4
EQI4 $383
ADDRGP4 cm_clanTag+16
INDIRI1
CVII4 1
ADDRLP4 2080
INDIRI4
EQI4 $383
ADDRLP4 2084
INDIRI4
CNSTI4 524288
BANDI4
ADDRLP4 2080
INDIRI4
NEI4 $383
line 759
;759:		!(ent->r.svFlags & SVF_BOT) && *cm_clanTag.string && cm_clanTag.string[0] && !(ent->r.svFlags & SVF_CLAN)){
line 760
;760:			trap_SendServerCommand( ent-g_entities, va("cp \"^1Your clan tag is reserved for members only!\n^1Please change it, or login in ^3%d seconds^1,\n^1or your clan name will be removed.\n\"", client->cmClanTimer ));
ADDRGP4 $387
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 1848
ADDP4
INDIRI4
ARGI4
ADDRLP4 2088
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 2088
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 761
;761:			client->cmClanTimer--;
ADDRLP4 2092
ADDRLP4 0
INDIRP4
CNSTI4 1848
ADDP4
ASGNP4
ADDRLP4 2092
INDIRP4
ADDRLP4 2092
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 762
;762:		}
LABELV $383
line 764
;763:		
;764:		if (client->cmClanTimer == 0 && client->pers.amclanreserved == 1 && !(ent->r.svFlags & SVF_CLAN)){
ADDRLP4 2092
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1848
ADDP4
INDIRI4
ADDRLP4 2092
INDIRI4
NEI4 $388
ADDRLP4 0
INDIRP4
CNSTI4 1552
ADDP4
INDIRI4
CNSTI4 1
NEI4 $388
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 524288
BANDI4
ADDRLP4 2092
INDIRI4
NEI4 $388
line 765
;765:			client->pers.amclanreserved = 0;
ADDRLP4 0
INDIRP4
CNSTI4 1552
ADDP4
CNSTI4 0
ASGNI4
line 766
;766:			uwRename(&g_entities[clientNum], "Padawan");
CNSTI4 852
ADDRLP4 2052
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRGP4 $390
ARGP4
ADDRGP4 uwRename
CALLV
pop
line 767
;767:			trap_SendServerCommand( ent-g_entities, va("print \"The clan name you were using was protected, you have been forcefully renamed.\n\"") );
ADDRGP4 $391
ARGP4
ADDRLP4 2096
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 2096
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 768
;768:		}
LABELV $388
line 771
;769:
;770:		//cm Center Screen MOTD
;771:		if (client->csTimeLeft && *cm_motd.string && cm_motd.string[0]) {
ADDRLP4 2096
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 1840
ADDP4
INDIRI4
ADDRLP4 2096
INDIRI4
EQI4 $392
ADDRGP4 cm_motd+16
INDIRI1
CVII4 1
ADDRLP4 2096
INDIRI4
EQI4 $392
ADDRGP4 cm_motd+16
INDIRI1
CVII4 1
ADDRLP4 2096
INDIRI4
EQI4 $392
line 772
;772:			trap_Cvar_VariableStringBuffer( "cm_motd", motdString, MAX_STRING_CHARS );
ADDRGP4 $396
ARGP4
ADDRLP4 1028
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 773
;773:			M_StringEscapeToEnters( motdString, motdWithNewLines, MAX_STRING_CHARS );
ADDRLP4 1028
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 M_StringEscapeToEnters
CALLV
pop
line 774
;774:			trap_SendServerCommand( ent->client->ps.clientNum, va ( "cp \"^1%s\n%s\nTimeLeft: ^3%d\"", GAMEVERSION, motdWithNewLines, ent->client->csTimeLeft ) );
ADDRGP4 $397
ARGP4
ADDRGP4 $398
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1840
ADDP4
INDIRI4
ARGI4
ADDRLP4 2100
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 2100
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 775
;775:			client->csTimeLeft--;
ADDRLP4 2104
ADDRLP4 0
INDIRP4
CNSTI4 1840
ADDP4
ASGNP4
ADDRLP4 2104
INDIRP4
ADDRLP4 2104
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 776
;776:		}
LABELV $392
line 777
;777:	}
LABELV $358
line 727
ADDRLP4 0
INDIRP4
CNSTI4 2880
ADDP4
INDIRI4
CNSTI4 1000
GEI4 $357
line 778
;778:}
LABELV $356
endproc ClientTimerActions 2108 16
export ClientIntermissionThink
proc ClientIntermissionThink 24 0
line 785
;779:
;780:/*
;781:====================
;782:ClientIntermissionThink
;783:====================
;784:*/
;785:void ClientIntermissionThink( gclient_t *client ) {
line 786
;786:	client->ps.eFlags &= ~EF_TALK;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -4097
BANDI4
ASGNI4
line 787
;787:	client->ps.eFlags &= ~EF_FIRING;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -257
BANDI4
ASGNI4
line 792
;788:
;789:	// the level will exit when everyone wants to or after timeouts
;790:
;791:	// swap and latch button actions
;792:	client->oldbuttons = client->buttons;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 1724
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ASGNI4
line 793
;793:	client->buttons = client->pers.cmd.buttons;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 1720
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 1400
ADDP4
INDIRI4
ASGNI4
line 794
;794:	if ( client->buttons & ( BUTTON_ATTACK | BUTTON_USE_HOLDABLE ) & ( client->oldbuttons ^ client->buttons ) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 5
BANDI4
ADDRLP4 16
INDIRP4
CNSTI4 1724
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
BXORI4
BANDI4
CNSTI4 0
EQI4 $400
line 796
;795:		// this used to be an ^1 but once a player says ready, it should stick
;796:		client->readyToExit = 1;
ADDRFP4 0
INDIRP4
CNSTI4 1708
ADDP4
CNSTI4 1
ASGNI4
line 797
;797:	}
LABELV $400
line 798
;798:}
LABELV $399
endproc ClientIntermissionThink 24 0
export ClientEvents
proc ClientEvents 68 32
line 809
;799:
;800:
;801:/*
;802:================
;803:ClientEvents
;804:
;805:Events will be passed on to the clients for presentation,
;806:but any server game effects are handled here
;807:================
;808:*/
;809:void ClientEvents( gentity_t *ent, int oldEventSequence ) {
line 820
;810:	int		i;//, j;
;811:	int		event;
;812:	gclient_t *client;
;813:	int		damage;
;814:	vec3_t	dir;
;815://	vec3_t	origin, angles;
;816://	qboolean	fired;
;817://	gitem_t *item;
;818://	gentity_t *drop;
;819:
;820:	client = ent->client;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
line 822
;821:
;822:	if ( oldEventSequence < client->ps.eventSequence - MAX_PS_EVENTS ) {
ADDRFP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 2
SUBI4
GEI4 $403
line 823
;823:		oldEventSequence = client->ps.eventSequence - MAX_PS_EVENTS;
ADDRFP4 4
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 2
SUBI4
ASGNI4
line 824
;824:	}
LABELV $403
line 825
;825:	for ( i = oldEventSequence ; i < client->ps.eventSequence ; i++ ) {
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRGP4 $408
JUMPV
LABELV $405
line 826
;826:		event = client->ps.events[ i & (MAX_PS_EVENTS-1) ];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDP4
INDIRI4
ASGNI4
line 828
;827:
;828:		switch ( event ) {
ADDRLP4 32
CNSTI4 15
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $411
ADDRLP4 4
INDIRI4
ADDRLP4 32
INDIRI4
GTI4 $437
LABELV $436
ADDRLP4 4
INDIRI4
CNSTI4 11
EQI4 $411
ADDRGP4 $410
JUMPV
LABELV $437
ADDRLP4 40
CNSTI4 24
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $424
ADDRLP4 4
INDIRI4
CNSTI4 25
EQI4 $426
ADDRLP4 4
INDIRI4
CNSTI4 26
EQI4 $428
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
LTI4 $410
LABELV $438
ADDRLP4 4
INDIRI4
CNSTI4 41
LTI4 $410
ADDRLP4 4
INDIRI4
CNSTI4 46
GTI4 $410
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $439-164
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $439
address $430
address $431
address $432
address $410
address $434
address $435
code
LABELV $411
line 831
;829:		case EV_FALL:
;830:		case EV_ROLL:
;831:			{
line 832
;832:				int delta = client->ps.eventParms[ i & (MAX_PS_EVENTS-1) ];
ADDRLP4 48
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 124
ADDP4
ADDP4
INDIRI4
ASGNI4
line 834
;833:
;834:				if (ent->client && ent->client->ps.fallingToDeath)
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $412
ADDRLP4 52
INDIRP4
CNSTI4 1352
ADDP4
INDIRI4
CNSTI4 0
EQI4 $412
line 835
;835:				{
line 836
;836:					break;
ADDRGP4 $410
JUMPV
LABELV $412
line 839
;837:				}
;838:
;839:				if ( ent->s.eType != ET_PLAYER )
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $414
line 840
;840:				{
line 841
;841:					break;		// not in the player model
ADDRGP4 $410
JUMPV
LABELV $414
line 844
;842:				}
;843:				
;844:				if ( g_dmflags.integer & DF_NO_FALLING )
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $416
line 845
;845:				{
line 846
;846:					break;
ADDRGP4 $410
JUMPV
LABELV $416
line 849
;847:				}
;848:
;849:				if (delta <= 44)
ADDRLP4 48
INDIRI4
CNSTI4 44
GTI4 $419
line 850
;850:				{
line 851
;851:					break;
ADDRGP4 $410
JUMPV
LABELV $419
line 854
;852:				}
;853:
;854:				damage = delta*0.16; //good enough for now, I guess
ADDRLP4 24
CNSTF4 1042536202
ADDRLP4 48
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 856
;855:
;856:				VectorSet (dir, 0, 0, 1);
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 12
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 12+8
CNSTF4 1065353216
ASGNF4
line 857
;857:				ent->pain_debounce_time = level.time + 200;	// no normal pain sound
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 858
;858:				G_Damage (ent, NULL, NULL, NULL, NULL, damage, DAMAGE_NO_ARMOR, MOD_FALLING);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 60
CNSTP4 0
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
CNSTP4 0
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 34
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 859
;859:			}
line 860
;860:			break;
ADDRGP4 $410
JUMPV
LABELV $424
line 862
;861:		case EV_FIRE_WEAPON:
;862:			FireWeapon( ent, qfalse );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 FireWeapon
CALLV
pop
line 863
;863:			ent->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 2948
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 864
;864:			ent->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 865
;865:			ent->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
CNSTI4 0
ASGNI4
line 866
;866:			break;
ADDRGP4 $410
JUMPV
LABELV $426
line 869
;867:
;868:		case EV_ALT_FIRE:
;869:			FireWeapon( ent, qtrue );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 FireWeapon
CALLV
pop
line 870
;870:			ent->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 2948
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 871
;871:			ent->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 872
;872:			ent->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
CNSTI4 0
ASGNI4
line 873
;873:			break;
ADDRGP4 $410
JUMPV
LABELV $428
line 876
;874:
;875:		case EV_SABER_ATTACK:
;876:			ent->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 2948
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 877
;877:			ent->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 878
;878:			ent->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
CNSTI4 0
ASGNI4
line 879
;879:			break;
ADDRGP4 $410
JUMPV
LABELV $430
line 883
;880:
;881:		//rww - Note that these must be in the same order (ITEM#-wise) as they are in holdable_t
;882:		case EV_USE_ITEM1: //seeker droid
;883:			ItemUse_Seeker(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Seeker
CALLV
pop
line 884
;884:			break;
ADDRGP4 $410
JUMPV
LABELV $431
line 886
;885:		case EV_USE_ITEM2: //shield
;886:			ItemUse_Shield(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Shield
CALLV
pop
line 887
;887:			break;
ADDRGP4 $410
JUMPV
LABELV $432
line 889
;888:		case EV_USE_ITEM3: //medpack
;889:			ItemUse_MedPack(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_MedPack
CALLV
pop
line 890
;890:			break;
ADDRGP4 $410
JUMPV
line 893
;891:		case EV_USE_ITEM4: //datapad
;892:			//G_Printf("Used Datapad\n");
;893:			break;
LABELV $434
line 895
;894:		case EV_USE_ITEM5: //binoculars
;895:			ItemUse_Binoculars(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Binoculars
CALLV
pop
line 896
;896:			break;
ADDRGP4 $410
JUMPV
LABELV $435
line 898
;897:		case EV_USE_ITEM6: //sentry gun
;898:			ItemUse_Sentry(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Sentry
CALLV
pop
line 899
;899:			break;
line 902
;900:
;901:		default:
;902:			break;
LABELV $410
line 904
;903:		}
;904:	}
LABELV $406
line 825
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $408
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
LTI4 $405
line 906
;905:
;906:}
LABELV $402
endproc ClientEvents 68 32
export SendPendingPredictableEvents
proc SendPendingPredictableEvents 40 12
line 913
;907:
;908:/*
;909:==============
;910:SendPendingPredictableEvents
;911:==============
;912:*/
;913:void SendPendingPredictableEvents( playerState_t *ps ) {
line 919
;914:	gentity_t *t;
;915:	int event, seq;
;916:	int extEvent, number;
;917:
;918:	// if there are still events pending
;919:	if ( ps->entityEventSequence < ps->eventSequence ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
GEI4 $442
line 922
;920:		// create a temporary entity for this event which is sent to everyone
;921:		// except the client who generated the event
;922:		seq = ps->entityEventSequence & (MAX_PS_EVENTS-1);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 1
BANDI4
ASGNI4
line 923
;923:		event = ps->events[ seq ] | ( ( ps->entityEventSequence & 3 ) << 8 );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 3
BANDI4
CNSTI4 8
LSHI4
BORI4
ASGNI4
line 925
;924:		// set external event to zero before calling BG_PlayerStateToEntityState
;925:		extEvent = ps->externalEvent;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ASGNI4
line 926
;926:		ps->externalEvent = 0;
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 928
;927:		// create temporary entity for event
;928:		t = G_TempEntity( ps->origin, event );
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 929
;929:		number = t->s.number;
ADDRLP4 16
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 930
;930:		BG_PlayerStateToEntityState( ps, &t->s, qtrue );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 BG_PlayerStateToEntityState
CALLV
pop
line 931
;931:		t->s.number = number;
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ASGNI4
line 932
;932:		t->s.eType = ET_EVENTS + event;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 933
;933:		t->s.eFlags |= EF_PLAYER_EVENT;
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 934
;934:		t->s.otherEntityNum = ps->clientNum;
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 936
;935:		// send to everyone except the client who generated the event
;936:		t->r.svFlags |= SVF_NOTSINGLECLIENT;
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
line 937
;937:		t->r.singleClient = ps->clientNum;
ADDRLP4 0
INDIRP4
CNSTI4 308
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 939
;938:		// set back external event
;939:		ps->externalEvent = extEvent;
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 940
;940:	}
LABELV $442
line 941
;941:}
LABELV $441
endproc SendPendingPredictableEvents 40 12
proc G_UpdateForceSightBroadcasts 72 12
line 961
;942:
;943:extern int saberOffSound;
;944:extern int saberOnSound;
;945:
;946:/*
;947:==================
;948:G_UpdateClientBroadcasts
;949:
;950:Determines whether this client should be broadcast to any other clients.  
;951:A client is broadcast when another client is using force sight or is
;952:==================
;953:*/
;954:#define MAX_JEDIMASTER_DISTANCE	2500
;955:#define MAX_JEDIMASTER_FOV		100
;956:
;957:#define MAX_SIGHT_DISTANCE		1500
;958:#define MAX_SIGHT_FOV			100
;959:
;960:static void G_UpdateForceSightBroadcasts ( gentity_t *self )
;961:{
line 965
;962:	int i;
;963:
;964:	// Any clients with force sight on should see this client
;965:	for ( i = 0; i < level.numConnectedClients; i ++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $448
JUMPV
LABELV $445
line 966
;966:	{
line 967
;967:		gentity_t *ent = &g_entities[level.sortedClients[i]];
ADDRLP4 4
CNSTI4 852
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+84
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 971
;968:		float	  dist;
;969:		vec3_t	  angles;
;970:	
;971:		if ( ent == self )
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $451
line 972
;972:		{
line 973
;973:			continue;
ADDRGP4 $446
JUMPV
LABELV $451
line 977
;974:		}
;975:
;976:		// Not using force sight so we shouldnt broadcast to this one
;977:		if ( !(ent->client->ps.fd.forcePowersActive & (1<<FP_SEE) ) )
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
NEI4 $453
line 978
;978:		{
line 979
;979:			continue;
ADDRGP4 $446
JUMPV
LABELV $453
line 982
;980:		}
;981:
;982:		VectorSubtract( self->client->ps.origin, ent->client->ps.origin, angles );
ADDRLP4 24
CNSTI4 408
ASGNI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ASGNP4
ADDRLP4 32
CNSTI4 20
ASGNI4
ADDRLP4 36
ADDRLP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 24
ASGNI4
ADDRLP4 8+4
ADDRLP4 28
INDIRP4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 408
ASGNI4
ADDRLP4 48
CNSTI4 28
ASGNI4
ADDRLP4 8+8
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 983
;983:		dist = VectorLengthSquared ( angles );
ADDRLP4 8
ARGP4
ADDRLP4 52
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 52
INDIRF4
ASGNF4
line 984
;984:		vectoangles ( angles, angles );
ADDRLP4 8
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 987
;985:
;986:		// Too far away then just forget it
;987:		if ( dist > MAX_SIGHT_DISTANCE * MAX_SIGHT_DISTANCE )
ADDRLP4 20
INDIRF4
CNSTF4 1242125376
LEF4 $457
line 988
;988:		{
line 989
;989:			continue;
ADDRGP4 $446
JUMPV
LABELV $457
line 993
;990:		}
;991:		
;992:		// If not within the field of view then forget it
;993:		if ( !InFieldOfVision ( ent->client->ps.viewangles, MAX_SIGHT_FOV, angles ) )
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
CNSTF4 1120403456
ARGF4
ADDRLP4 8
ARGP4
ADDRLP4 56
ADDRGP4 InFieldOfVision
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $459
line 994
;994:		{
line 995
;995:			break;
ADDRGP4 $447
JUMPV
LABELV $459
line 1000
;996:		}
;997:
;998:		// Turn on the broadcast bit for the master and since there is only one
;999:		// master we are done
;1000:		self->r.broadcastClients[ent->s.clientNum/32] |= (1 << (ent->s.clientNum%32));
ADDRLP4 60
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 64
CNSTI4 32
ASGNI4
ADDRLP4 68
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
DIVI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 400
ADDP4
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
MODI4
LSHI4
BORI4
ASGNI4
line 1002
;1001:	
;1002:		break;
ADDRGP4 $447
JUMPV
LABELV $446
line 965
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $448
ADDRLP4 0
INDIRI4
ADDRGP4 level+72
INDIRI4
LTI4 $445
LABELV $447
line 1004
;1003:	}
;1004:}
LABELV $444
endproc G_UpdateForceSightBroadcasts 72 12
proc G_UpdateJediMasterBroadcasts 72 12
line 1007
;1005:
;1006:static void G_UpdateJediMasterBroadcasts ( gentity_t *self )
;1007:{
line 1011
;1008:	int i;
;1009:
;1010:	// Not jedi master mode then nothing to do
;1011:	if ( g_gametype.integer != GT_JEDIMASTER )
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
EQI4 $462
line 1012
;1012:	{
line 1013
;1013:		return;
ADDRGP4 $461
JUMPV
LABELV $462
line 1017
;1014:	}
;1015:
;1016:	// This client isnt the jedi master so it shouldnt broadcast
;1017:	if ( !self->client->ps.isJediMaster )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
NEI4 $465
line 1018
;1018:	{
line 1019
;1019:		return;
ADDRGP4 $461
JUMPV
LABELV $465
line 1023
;1020:	}
;1021:
;1022:	// Broadcast ourself to all clients within range
;1023:	for ( i = 0; i < level.numConnectedClients; i ++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $470
JUMPV
LABELV $467
line 1024
;1024:	{
line 1025
;1025:		gentity_t *ent = &g_entities[level.sortedClients[i]];
ADDRLP4 4
CNSTI4 852
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+84
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1029
;1026:		float	  dist;
;1027:		vec3_t	  angles;
;1028:
;1029:		if ( ent == self )
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $473
line 1030
;1030:		{
line 1031
;1031:			continue;
ADDRGP4 $468
JUMPV
LABELV $473
line 1034
;1032:		}
;1033:
;1034:		VectorSubtract( self->client->ps.origin, ent->client->ps.origin, angles );
ADDRLP4 24
CNSTI4 408
ASGNI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ASGNP4
ADDRLP4 32
CNSTI4 20
ASGNI4
ADDRLP4 36
ADDRLP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 24
ASGNI4
ADDRLP4 8+4
ADDRLP4 28
INDIRP4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 408
ASGNI4
ADDRLP4 48
CNSTI4 28
ASGNI4
ADDRLP4 8+8
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1035
;1035:		dist = VectorLengthSquared ( angles );
ADDRLP4 8
ARGP4
ADDRLP4 52
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 52
INDIRF4
ASGNF4
line 1036
;1036:		vectoangles ( angles, angles );
ADDRLP4 8
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1039
;1037:
;1038:		// Too far away then just forget it
;1039:		if ( dist > MAX_JEDIMASTER_DISTANCE * MAX_JEDIMASTER_DISTANCE )
ADDRLP4 20
INDIRF4
CNSTF4 1254013984
LEF4 $477
line 1040
;1040:		{
line 1041
;1041:			continue;
ADDRGP4 $468
JUMPV
LABELV $477
line 1045
;1042:		}
;1043:		
;1044:		// If not within the field of view then forget it
;1045:		if ( !InFieldOfVision ( ent->client->ps.viewangles, MAX_JEDIMASTER_FOV, angles ) )
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
CNSTF4 1120403456
ARGF4
ADDRLP4 8
ARGP4
ADDRLP4 56
ADDRGP4 InFieldOfVision
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $479
line 1046
;1046:		{
line 1047
;1047:			continue;
ADDRGP4 $468
JUMPV
LABELV $479
line 1052
;1048:		}
;1049:
;1050:		// Turn on the broadcast bit for the master and since there is only one
;1051:		// master we are done
;1052:		self->r.broadcastClients[ent->s.clientNum/32] |= (1 << (ent->s.clientNum%32));
ADDRLP4 60
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 64
CNSTI4 32
ASGNI4
ADDRLP4 68
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
DIVI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 400
ADDP4
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
MODI4
LSHI4
BORI4
ASGNI4
line 1053
;1053:	}
LABELV $468
line 1023
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $470
ADDRLP4 0
INDIRI4
ADDRGP4 level+72
INDIRI4
LTI4 $467
line 1054
;1054:}
LABELV $461
endproc G_UpdateJediMasterBroadcasts 72 12
export G_UpdateClientBroadcasts
proc G_UpdateClientBroadcasts 0 12
line 1057
;1055:
;1056:void G_UpdateClientBroadcasts ( gentity_t *self )
;1057:{
line 1059
;1058:	// Clear all the broadcast bits for this client
;1059:	memset ( self->r.broadcastClients, 0, sizeof ( self->r.broadcastClients ) );
ADDRFP4 0
INDIRP4
CNSTI4 400
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 8
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1062
;1060:
;1061:	// The jedi master is broadcast to everyone in range
;1062:	G_UpdateJediMasterBroadcasts ( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_UpdateJediMasterBroadcasts
CALLV
pop
line 1065
;1063:
;1064:	// Anyone with force sight on should see this client
;1065:	G_UpdateForceSightBroadcasts ( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_UpdateForceSightBroadcasts
CALLV
pop
line 1066
;1066:}
LABELV $481
endproc G_UpdateClientBroadcasts 0 12
export ClientThink_real
proc ClientThink_real 604 32
line 1079
;1067:
;1068:/*
;1069:==============
;1070:ClientThink
;1071:
;1072:This will be called once for each client frame, which will
;1073:usually be a couple times for each server frame on fast clients.
;1074:
;1075:If "g_synchronousClients 1" is set, this will be called exactly
;1076:once for each server frame, which makes for smooth demo recording.
;1077:==============
;1078:*/
;1079:void ClientThink_real( gentity_t *ent ) {
line 1087
;1080:	gclient_t	*client;
;1081:	pmove_t		pm;
;1082:	int			oldEventSequence;
;1083:	int			msec;
;1084:	int			i;
;1085:	usercmd_t	*ucmd;
;1086:
;1087:	client = ent->client;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
line 1090
;1088:
;1089:	// don't think if the client is not yet connected (and thus not yet spawned in)
;1090:	if (client->pers.connected != CON_CONNECTED) {
ADDRLP4 4
INDIRP4
CNSTI4 1380
ADDP4
INDIRI4
CNSTI4 2
EQI4 $483
line 1091
;1091:		return;
ADDRGP4 $482
JUMPV
LABELV $483
line 1094
;1092:	}
;1093:	// mark the time, so the connection sprite can be removed
;1094:	ucmd = &ent->client->pers.cmd;
ADDRLP4 388
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ASGNP4
line 1097
;1095:
;1096:	// sanity check the command time to prevent speedup cheating
;1097:	if ( ucmd->serverTime > level.time + 200 ) {
ADDRLP4 388
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
LEI4 $485
line 1098
;1098:		ucmd->serverTime = level.time + 200;
ADDRLP4 388
INDIRP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 1100
;1099://		G_Printf("serverTime <<<<<\n" );
;1100:	}
LABELV $485
line 1101
;1101:	if ( ucmd->serverTime < level.time - 1000 ) {
ADDRLP4 388
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
SUBI4
GEI4 $489
line 1102
;1102:		ucmd->serverTime = level.time - 1000;
ADDRLP4 388
INDIRP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
SUBI4
ASGNI4
line 1104
;1103://		G_Printf("serverTime >>>>>\n" );
;1104:	} 
LABELV $489
line 1106
;1105:
;1106:	msec = ucmd->serverTime - client->ps.commandTime;
ADDRLP4 392
ADDRLP4 388
INDIRP4
INDIRI4
ADDRLP4 4
INDIRP4
INDIRI4
SUBI4
ASGNI4
line 1109
;1107:	// following others may result in bad times, but we still want
;1108:	// to check for follow toggles
;1109:	if ( msec < 1 && client->sess.spectatorState != SPECTATOR_FOLLOW ) {
ADDRLP4 392
INDIRI4
CNSTI4 1
GEI4 $493
ADDRLP4 4
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 2
EQI4 $493
line 1110
;1110:		return;
ADDRGP4 $482
JUMPV
LABELV $493
line 1112
;1111:	}
;1112:	if ( msec > 200 ) {
ADDRLP4 392
INDIRI4
CNSTI4 200
LEI4 $495
line 1113
;1113:		msec = 200;
ADDRLP4 392
CNSTI4 200
ASGNI4
line 1114
;1114:	}
LABELV $495
line 1116
;1115:
;1116:	if ( pmove_msec.integer < 8 ) {
ADDRGP4 pmove_msec+12
INDIRI4
CNSTI4 8
GEI4 $497
line 1117
;1117:		trap_Cvar_Set("pmove_msec", "8");
ADDRGP4 $500
ARGP4
ADDRGP4 $501
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1118
;1118:	}
ADDRGP4 $498
JUMPV
LABELV $497
line 1119
;1119:	else if (pmove_msec.integer > 33) {
ADDRGP4 pmove_msec+12
INDIRI4
CNSTI4 33
LEI4 $502
line 1120
;1120:		trap_Cvar_Set("pmove_msec", "33");
ADDRGP4 $500
ARGP4
ADDRGP4 $505
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1121
;1121:	}
LABELV $502
LABELV $498
line 1123
;1122:
;1123:	if ( pmove_fixed.integer || client->pers.pmoveFixed ) {
ADDRLP4 400
CNSTI4 0
ASGNI4
ADDRGP4 pmove_fixed+12
INDIRI4
ADDRLP4 400
INDIRI4
NEI4 $509
ADDRLP4 4
INDIRP4
CNSTI4 1424
ADDP4
INDIRI4
ADDRLP4 400
INDIRI4
EQI4 $506
LABELV $509
line 1124
;1124:		ucmd->serverTime = ((ucmd->serverTime + pmove_msec.integer-1) / pmove_msec.integer) * pmove_msec.integer;
ADDRLP4 388
INDIRP4
ADDRLP4 388
INDIRP4
INDIRI4
ADDRGP4 pmove_msec+12
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRGP4 pmove_msec+12
INDIRI4
DIVI4
ADDRGP4 pmove_msec+12
INDIRI4
MULI4
ASGNI4
line 1127
;1125:		//if (ucmd->serverTime - client->ps.commandTime <= 0)
;1126:		//	return;
;1127:	}
LABELV $506
line 1132
;1128:
;1129:	//
;1130:	// check for exiting intermission
;1131:	//
;1132:	if ( level.intermissiontime ) {
ADDRGP4 level+9008
INDIRI4
CNSTI4 0
EQI4 $513
line 1133
;1133:		ClientIntermissionThink( client );
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 ClientIntermissionThink
CALLV
pop
line 1134
;1134:		return;
ADDRGP4 $482
JUMPV
LABELV $513
line 1138
;1135:	}
;1136:
;1137:	// spectators don't do much
;1138:	if ( client->sess.sessionTeam == TEAM_SPECTATOR ) {
ADDRLP4 4
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
NEI4 $516
line 1139
;1139:		if ( client->sess.spectatorState == SPECTATOR_SCOREBOARD ) {
ADDRLP4 4
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 3
NEI4 $518
line 1140
;1140:			return;
ADDRGP4 $482
JUMPV
LABELV $518
line 1142
;1141:		}
;1142:		SpectatorThink( ent, ucmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 388
INDIRP4
ARGP4
ADDRGP4 SpectatorThink
CALLV
pop
line 1143
;1143:		return;
ADDRGP4 $482
JUMPV
LABELV $516
line 1146
;1144:	}
;1145:
;1146:	if (ent && ent->client && (ent->client->ps.eFlags & EF_INVULNERABLE))
ADDRLP4 404
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 408
CNSTU4 0
ASGNU4
ADDRLP4 404
INDIRP4
CVPU4 4
ADDRLP4 408
INDIRU4
EQU4 $520
ADDRLP4 412
ADDRLP4 404
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 412
INDIRP4
CVPU4 4
ADDRLP4 408
INDIRU4
EQU4 $520
ADDRLP4 412
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 67108864
BANDI4
CNSTI4 0
EQI4 $520
line 1147
;1147:	{
line 1148
;1148:		if (ent->client->invulnerableTimer <= level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GTI4 $522
line 1149
;1149:		{
line 1150
;1150:			ent->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 416
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 416
INDIRP4
ADDRLP4 416
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 1151
;1151:		}
LABELV $522
line 1152
;1152:	}
LABELV $520
line 1155
;1153:
;1154:	// check for inactivity timer, but never drop the local client of a non-dedicated server
;1155:	if ( !ClientInactivityTimer( client ) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 416
ADDRGP4 ClientInactivityTimer
CALLI4
ASGNI4
ADDRLP4 416
INDIRI4
CNSTI4 0
NEI4 $525
line 1156
;1156:		return;
ADDRGP4 $482
JUMPV
LABELV $525
line 1160
;1157:	}
;1158:
;1159:	// clear the rewards if time
;1160:	if ( level.time > client->rewardTime ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1820
ADDP4
INDIRI4
LEI4 $527
line 1161
;1161:		client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 420
ADDRLP4 4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 420
INDIRP4
ADDRLP4 420
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 1162
;1162:	}
LABELV $527
line 1164
;1163:
;1164:	if ( client->noclip ) {
ADDRLP4 4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
CNSTI4 0
EQI4 $530
line 1165
;1165:		client->ps.pm_type = PM_NOCLIP;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 1166
;1166:	} else if ( client->ps.eFlags & EF_DISINTEGRATION ) {
ADDRGP4 $531
JUMPV
LABELV $530
ADDRLP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 33554432
BANDI4
CNSTI4 0
EQI4 $532
line 1167
;1167:		client->ps.pm_type = PM_NOCLIP;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 1168
;1168:	} else if ( client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 $533
JUMPV
LABELV $532
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $534
line 1169
;1169:		client->ps.pm_type = PM_DEAD;
ADDRLP4 420
CNSTI4 4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 420
INDIRI4
ADDP4
ADDRLP4 420
INDIRI4
ASGNI4
line 1170
;1170:	} else {
ADDRGP4 $535
JUMPV
LABELV $534
line 1171
;1171:		if (client->ps.forceGripChangeMovetype)
ADDRLP4 4
INDIRP4
CNSTI4 1288
ADDP4
INDIRI4
CNSTI4 0
EQI4 $536
line 1172
;1172:		{
line 1173
;1173:			client->ps.pm_type = client->ps.forceGripChangeMovetype;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1288
ADDP4
INDIRI4
ASGNI4
line 1174
;1174:		}
ADDRGP4 $537
JUMPV
LABELV $536
line 1176
;1175:		else
;1176:		{
line 1177
;1177:			if (client->freeze==1)
ADDRLP4 4
INDIRP4
CNSTI4 2960
ADDP4
INDIRI4
CNSTI4 1
NEI4 $538
line 1178
;1178:			{
line 1179
;1179:				if (client->pers.cmd.forwardmove || client->pers.cmd.rightmove || client->pers.cmd.upmove) {
ADDRLP4 424
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 1408
ADDP4
INDIRI1
CVII4 1
ADDRLP4 424
INDIRI4
NEI4 $543
ADDRLP4 4
INDIRP4
CNSTI4 1409
ADDP4
INDIRI1
CVII4 1
ADDRLP4 424
INDIRI4
NEI4 $543
ADDRLP4 4
INDIRP4
CNSTI4 1410
ADDP4
INDIRI1
CVII4 1
ADDRLP4 424
INDIRI4
EQI4 $540
LABELV $543
line 1180
;1180:					client->ps.saberCanThrow = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 560
ADDP4
CNSTI4 1
ASGNI4
line 1181
;1181:					client->ps.pm_type = PM_NORMAL;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 1182
;1182:					client->freeze=0;
ADDRLP4 4
INDIRP4
CNSTI4 2960
ADDP4
CNSTI4 0
ASGNI4
line 1183
;1183:				} else {
ADDRGP4 $539
JUMPV
LABELV $540
line 1184
;1184:					client->ps.pm_type = PM_FREEZE;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 5
ASGNI4
line 1185
;1185:				}
line 1186
;1186:			}
ADDRGP4 $539
JUMPV
LABELV $538
line 1188
;1187:			else
;1188:			{
line 1189
;1189:				client->ps.pm_type = PM_NORMAL;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 1190
;1190:			}
LABELV $539
line 1191
;1191:		}
LABELV $537
line 1192
;1192:	}
LABELV $535
LABELV $533
LABELV $531
line 1194
;1193:
;1194:	client->ps.gravity = g_gravity.value;
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
ADDRGP4 g_gravity+8
INDIRF4
CVFI4 4
ASGNI4
line 1197
;1195:
;1196:	// set speed
;1197:	client->ps.speed = g_speed.value;
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
ADDRGP4 g_speed+8
INDIRF4
CVFI4 4
ASGNI4
line 1198
;1198:	client->ps.basespeed = g_speed.value;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
ADDRGP4 g_speed+8
INDIRF4
CVFI4 4
ASGNI4
line 1200
;1199:
;1200:	if (ent->client->pers.ampunish == qtrue) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1544
ADDP4
INDIRI4
CNSTI4 1
NEI4 $547
line 1201
;1201:		ent->client->ps.pm_type = PM_FLOAT;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 1
ASGNI4
line 1202
;1202:		ent->client->ps.weaponTime = 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 100
ASGNI4
line 1203
;1203:	}
LABELV $547
line 1205
;1204:
;1205:	if (level.meetingMode == qtrue || level.matchMode == qtrue){
ADDRLP4 420
CNSTI4 1
ASGNI4
ADDRGP4 level+9112
INDIRI4
ADDRLP4 420
INDIRI4
EQI4 $553
ADDRGP4 level+9116
INDIRI4
ADDRLP4 420
INDIRI4
NEI4 $549
LABELV $553
line 1206
;1206:		if( ent->r.svFlags & SVF_BOT ){
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $554
line 1207
;1207:			if (ent->client->sess.sessionTeam != TEAM_SPECTATOR){
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
EQI4 $556
line 1208
;1208:						SetTeam(ent, "spectator" );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $558
ARGP4
ADDRGP4 SetTeam
CALLV
pop
line 1209
;1209:			}
LABELV $556
line 1210
;1210:		}
LABELV $554
line 1211
;1211:	}
LABELV $549
line 1212
;1212:	if (level.meetingMode == qtrue){
ADDRGP4 level+9112
INDIRI4
CNSTI4 1
NEI4 $559
line 1213
;1213:		ent->client->ps.weaponTime = 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 100
ASGNI4
line 1214
;1214:		ent->client->ps.forceRestricted = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 608
ADDP4
CNSTI4 1
ASGNI4
line 1215
;1215:		ent->client->ps.saberHolstered = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1312
ADDP4
CNSTI4 1
ASGNI4
line 1216
;1216:	}
LABELV $559
line 1218
;1217:
;1218:	if (ent->client->ps.duelInProgress)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $562
line 1219
;1219:	{
line 1220
;1220:		gentity_t *duelAgainst = &g_entities[ent->client->ps.duelIndex];
ADDRLP4 424
CNSTI4 852
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1296
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1228
;1221:
;1222:		//Keep the time updated, so once this duel ends this player can't engage in a duel for another
;1223:		//10 seconds. This will give other people a chance to engage in duels in case this player wants
;1224:		//to engage again right after he's done fighting and someone else is waiting.
;1225:		//cm NOTE: duel time removal
;1226:		//ent->client->ps.fd.privateDuelTime = level.time + 10000;
;1227:
;1228:		if (ent->client->ps.duelTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $564
line 1229
;1229:		{
line 1231
;1230:			//Bring out the sabers
;1231:			if (ent->client->ps.weapon == WP_SABER && ent->client->ps.saberHolstered &&
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 428
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $567
ADDRLP4 432
CNSTI4 0
ASGNI4
ADDRLP4 428
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
ADDRLP4 432
INDIRI4
EQI4 $567
ADDRLP4 428
INDIRP4
CNSTI4 1300
ADDP4
INDIRI4
ADDRLP4 432
INDIRI4
EQI4 $567
line 1233
;1232:				ent->client->ps.duelTime)
;1233:			{
line 1234
;1234:				if (cm_duelbeginsaberoff.integer == 0) {
ADDRGP4 cm_duelbeginsaberoff+12
INDIRI4
CNSTI4 0
NEI4 $569
line 1235
;1235:				if (!saberOffSound || !saberOnSound)
ADDRLP4 436
CNSTI4 0
ASGNI4
ADDRGP4 saberOffSound
INDIRI4
ADDRLP4 436
INDIRI4
EQI4 $574
ADDRGP4 saberOnSound
INDIRI4
ADDRLP4 436
INDIRI4
NEI4 $572
LABELV $574
line 1236
;1236:				{
line 1237
;1237:					saberOffSound = G_SoundIndex("sound/weapons/saber/saberoffquick.wav");
ADDRGP4 $575
ARGP4
ADDRLP4 440
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 saberOffSound
ADDRLP4 440
INDIRI4
ASGNI4
line 1238
;1238:					saberOnSound = G_SoundIndex("sound/weapons/saber/saberon.wav");
ADDRGP4 $576
ARGP4
ADDRLP4 444
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 saberOnSound
ADDRLP4 444
INDIRI4
ASGNI4
line 1239
;1239:				}
LABELV $572
line 1241
;1240:
;1241:				ent->client->ps.saberHolstered = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1312
ADDP4
CNSTI4 0
ASGNI4
line 1242
;1242:				G_Sound(ent, CHAN_AUTO, saberOnSound);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 saberOnSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1243
;1243:				}
LABELV $569
line 1245
;1244:
;1245:				G_AddEvent(ent, EV_PRIVATE_DUEL, 2);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1247
;1246:
;1247:				ent->client->ps.duelTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
CNSTI4 0
ASGNI4
line 1248
;1248:			}
LABELV $567
line 1250
;1249:
;1250:			if (duelAgainst && duelAgainst->client && duelAgainst->inuse &&
ADDRLP4 440
CNSTU4 0
ASGNU4
ADDRLP4 424
INDIRP4
CVPU4 4
ADDRLP4 440
INDIRU4
EQU4 $565
ADDRLP4 444
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
CVPU4 4
ADDRLP4 440
INDIRU4
EQU4 $565
ADDRLP4 448
CNSTI4 0
ASGNI4
ADDRLP4 424
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 448
INDIRI4
EQI4 $565
ADDRLP4 444
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $565
ADDRLP4 444
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
ADDRLP4 448
INDIRI4
EQI4 $565
ADDRLP4 444
INDIRP4
CNSTI4 1300
ADDP4
INDIRI4
ADDRLP4 448
INDIRI4
EQI4 $565
line 1253
;1251:				duelAgainst->client->ps.weapon == WP_SABER && duelAgainst->client->ps.saberHolstered &&
;1252:				duelAgainst->client->ps.duelTime)
;1253:			{
line 1254
;1254:				if (cm_duelbeginsaberoff.integer == 0) {
ADDRGP4 cm_duelbeginsaberoff+12
INDIRI4
CNSTI4 0
NEI4 $579
line 1255
;1255:				if (!saberOffSound || !saberOnSound)
ADDRLP4 452
CNSTI4 0
ASGNI4
ADDRGP4 saberOffSound
INDIRI4
ADDRLP4 452
INDIRI4
EQI4 $584
ADDRGP4 saberOnSound
INDIRI4
ADDRLP4 452
INDIRI4
NEI4 $582
LABELV $584
line 1256
;1256:				{
line 1257
;1257:					saberOffSound = G_SoundIndex("sound/weapons/saber/saberoffquick.wav");
ADDRGP4 $575
ARGP4
ADDRLP4 456
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 saberOffSound
ADDRLP4 456
INDIRI4
ASGNI4
line 1258
;1258:					saberOnSound = G_SoundIndex("sound/weapons/saber/saberon.wav");
ADDRGP4 $576
ARGP4
ADDRLP4 460
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 saberOnSound
ADDRLP4 460
INDIRI4
ASGNI4
line 1259
;1259:				}
LABELV $582
line 1261
;1260:
;1261:				duelAgainst->client->ps.saberHolstered = qfalse;
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1312
ADDP4
CNSTI4 0
ASGNI4
line 1262
;1262:				G_Sound(duelAgainst, CHAN_AUTO, saberOnSound);
ADDRLP4 424
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 saberOnSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1263
;1263:				}
LABELV $579
line 1265
;1264:
;1265:				G_AddEvent(duelAgainst, EV_PRIVATE_DUEL, 2);
ADDRLP4 424
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1267
;1266:
;1267:				duelAgainst->client->ps.duelTime = 0;
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
CNSTI4 0
ASGNI4
line 1268
;1268:			}
line 1269
;1269:		}
ADDRGP4 $565
JUMPV
LABELV $564
line 1271
;1270:		else
;1271:		{
line 1272
;1272:			client->ps.speed = 0;
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 0
ASGNI4
line 1273
;1273:			client->ps.basespeed = 0;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1274
;1274:			ucmd->forwardmove = 0;
ADDRLP4 388
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 0
ASGNI1
line 1275
;1275:			ucmd->rightmove = 0;
ADDRLP4 388
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 0
ASGNI1
line 1276
;1276:			ucmd->upmove = 0;
ADDRLP4 388
INDIRP4
CNSTI4 26
ADDP4
CNSTI1 0
ASGNI1
line 1277
;1277:		}
LABELV $565
line 1279
;1278:
;1279:		if (!duelAgainst || !duelAgainst->client || !duelAgainst->inuse ||
ADDRLP4 432
CNSTU4 0
ASGNU4
ADDRLP4 424
INDIRP4
CVPU4 4
ADDRLP4 432
INDIRU4
EQU4 $589
ADDRLP4 436
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 436
INDIRP4
CVPU4 4
ADDRLP4 432
INDIRU4
EQU4 $589
ADDRLP4 424
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $589
ADDRLP4 436
INDIRP4
CNSTI4 1296
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $585
LABELV $589
line 1281
;1280:			duelAgainst->client->ps.duelIndex != ent->s.number)
;1281:		{
line 1282
;1282:			ent->client->ps.duelInProgress = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
CNSTI4 0
ASGNI4
line 1283
;1283:			G_AddEvent(ent, EV_PRIVATE_DUEL, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1284
;1284:		}
ADDRGP4 $586
JUMPV
LABELV $585
line 1285
;1285:		else if (duelAgainst->health < 1 || duelAgainst->client->ps.stats[STAT_HEALTH] < 1)
ADDRLP4 444
CNSTI4 1
ASGNI4
ADDRLP4 424
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 444
INDIRI4
LTI4 $592
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 444
INDIRI4
GEI4 $590
LABELV $592
line 1286
;1286:		{
line 1287
;1287:			if (cm_duelstatus.integer >= 1)
ADDRGP4 cm_duelstatus+12
INDIRI4
CNSTI4 1
LTI4 $593
line 1288
;1288:			{
line 1289
;1289:			trap_SendServerCommand( -1, va("print \"%s ^7survived with ^5%d ^7health and ^5%d ^7shield\n\"",
ADDRGP4 $596
ARGP4
ADDRLP4 448
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
CNSTI4 1428
ADDP4
ARGP4
ADDRLP4 448
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ARGI4
ADDRLP4 452
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 452
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1293
;1290:			ent->client->pers.netname, ent->client->ps.stats[STAT_HEALTH], ent->client->ps.stats[STAT_ARMOR] ) );
;1291:			/*trap_SendServerCommand( ent-g_entities, va("cp \"^7You survived with\n^1%d^7/^2%d\n\"",
;1292:			ent->client->ps.stats[STAT_HEALTH], ent->client->ps.stats[STAT_ARMOR] ) );*/
;1293:			}
LABELV $593
line 1295
;1294:
;1295:			ent->client->ps.duelInProgress = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
CNSTI4 0
ASGNI4
line 1296
;1296:			duelAgainst->client->ps.duelInProgress = 0;
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
CNSTI4 0
ASGNI4
line 1298
;1297:
;1298:			G_AddEvent(ent, EV_PRIVATE_DUEL, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1299
;1299:			G_AddEvent(duelAgainst, EV_PRIVATE_DUEL, 0);
ADDRLP4 424
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1302
;1300:
;1301:			//Winner gets full health.. providing he's still alive
;1302:			if (ent->health > 0 && ent->client->ps.stats[STAT_HEALTH] > 0)
ADDRLP4 448
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 452
CNSTI4 0
ASGNI4
ADDRLP4 448
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 452
INDIRI4
LEI4 $597
ADDRLP4 448
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 452
INDIRI4
LEI4 $597
line 1303
;1303:			{
line 1309
;1304:				/*if (ent->health < ent->client->ps.stats[STAT_MAX_HEALTH])
;1305:				{
;1306:					ent->client->ps.stats[STAT_HEALTH] = ent->health = ent->client->ps.stats[STAT_MAX_HEALTH];
;1307:				}*/
;1308:				//cm NOTE: FULL heal
;1309:				ent->client->ps.stats[STAT_HEALTH] = ent->health = ent->client->ps.stats[STAT_MAX_HEALTH] + 25;
ADDRLP4 456
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 460
ADDRLP4 456
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 464
ADDRLP4 460
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
CNSTI4 25
ADDI4
ASGNI4
ADDRLP4 456
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 464
INDIRI4
ASGNI4
ADDRLP4 460
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 464
INDIRI4
ASGNI4
line 1310
;1310:				ent->client->ps.stats[STAT_ARMOR] = 25;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 236
ADDP4
CNSTI4 25
ASGNI4
line 1312
;1311:
;1312:				if (g_spawnInvulnerability.integer)
ADDRGP4 g_spawnInvulnerability+12
INDIRI4
CNSTI4 0
EQI4 $599
line 1313
;1313:				{
line 1314
;1314:					ent->client->ps.eFlags |= EF_INVULNERABLE;
ADDRLP4 468
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 468
INDIRP4
ADDRLP4 468
INDIRP4
INDIRI4
CNSTI4 67108864
BORI4
ASGNI4
line 1315
;1315:					ent->client->invulnerableTimer = level.time + g_spawnInvulnerability.integer;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_spawnInvulnerability+12
INDIRI4
ADDI4
ASGNI4
line 1316
;1316:				}
LABELV $599
line 1317
;1317:			}
LABELV $597
line 1324
;1318:
;1319:			/*
;1320:			trap_SendServerCommand( ent-g_entities, va("print \"%s %s\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER")) );
;1321:			trap_SendServerCommand( duelAgainst-g_entities, va("print \"%s %s\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER")) );
;1322:			*/
;1323:			//Private duel announcements are now made globally because we only want one duel at a time.
;1324:			if (ent->health > 0 && ent->client->ps.stats[STAT_HEALTH] > 0)
ADDRLP4 456
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 460
CNSTI4 0
ASGNI4
ADDRLP4 456
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 460
INDIRI4
LEI4 $604
ADDRLP4 456
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 460
INDIRI4
LEI4 $604
line 1325
;1325:			{
line 1326
;1326:				if (cm_multiduels.integer==0){
ADDRGP4 cm_multiduels+12
INDIRI4
CNSTI4 0
NEI4 $606
line 1327
;1327:					trap_SendServerCommand( -1, va("cp \"%s %s %s!\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER"), duelAgainst->client->pers.netname) );
ADDRGP4 $610
ARGP4
ADDRGP4 $611
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $609
ARGP4
ADDRLP4 468
CNSTI4 408
ASGNI4
ADDRLP4 472
CNSTI4 1428
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 424
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 476
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 476
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1328
;1328:				} else {
ADDRGP4 $607
JUMPV
LABELV $606
line 1329
;1329:					trap_SendServerCommand( ent-g_entities, va("cp \"%s %s %s!\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER"), duelAgainst->client->pers.netname) );
ADDRGP4 $610
ARGP4
ADDRGP4 $611
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $609
ARGP4
ADDRLP4 468
CNSTI4 408
ASGNI4
ADDRLP4 472
CNSTI4 1428
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 424
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 476
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 476
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1330
;1330:					trap_SendServerCommand( duelAgainst-g_entities, va("cp \"%s %s %s!\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER"), duelAgainst->client->pers.netname) );
ADDRGP4 $610
ARGP4
ADDRGP4 $611
ARGP4
ADDRLP4 480
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $609
ARGP4
ADDRLP4 484
CNSTI4 408
ASGNI4
ADDRLP4 488
CNSTI4 1428
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 484
INDIRI4
ADDP4
INDIRP4
ADDRLP4 488
INDIRI4
ADDP4
ARGP4
ADDRLP4 480
INDIRP4
ARGP4
ADDRLP4 424
INDIRP4
ADDRLP4 484
INDIRI4
ADDP4
INDIRP4
ADDRLP4 488
INDIRI4
ADDP4
ARGP4
ADDRLP4 492
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 424
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 492
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1331
;1331:				}
LABELV $607
line 1332
;1332:				trap_SendServerCommand( -1, va("print \"%s %s %s!\n\"", ent->client->pers.netname, G_GetStripEdString("SVINGAME", "PLDUELWINNER"), duelAgainst->client->pers.netname) );
ADDRGP4 $610
ARGP4
ADDRGP4 $611
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $612
ARGP4
ADDRLP4 468
CNSTI4 408
ASGNI4
ADDRLP4 472
CNSTI4 1428
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 424
INDIRP4
ADDRLP4 468
INDIRI4
ADDP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
ARGP4
ADDRLP4 476
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 476
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1333
;1333:			}
ADDRGP4 $591
JUMPV
LABELV $604
line 1335
;1334:			else
;1335:			{ //it was a draw, because we both managed to die in the same frame
line 1336
;1336:				if (cm_multiduels.integer==0){
ADDRGP4 cm_multiduels+12
INDIRI4
CNSTI4 0
NEI4 $613
line 1337
;1337:					trap_SendServerCommand( -1, va("cp \"%s\n\"", G_GetStripEdString("SVINGAME", "PLDUELTIE")) );
ADDRGP4 $610
ARGP4
ADDRGP4 $617
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $616
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 468
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 468
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1338
;1338:				} else {
ADDRGP4 $614
JUMPV
LABELV $613
line 1339
;1339:					trap_SendServerCommand( ent-g_entities, va("cp \"%s\n\"", G_GetStripEdString("SVINGAME", "PLDUELTIE")) );
ADDRGP4 $610
ARGP4
ADDRGP4 $617
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $616
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 468
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 468
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1340
;1340:					trap_SendServerCommand( duelAgainst-g_entities, va("cp \"%s\n\"", G_GetStripEdString("SVINGAME", "PLDUELTIE")) );
ADDRGP4 $610
ARGP4
ADDRGP4 $617
ARGP4
ADDRLP4 472
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $616
ARGP4
ADDRLP4 472
INDIRP4
ARGP4
ADDRLP4 476
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 424
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 852
DIVI4
ARGI4
ADDRLP4 476
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1341
;1341:				}
LABELV $614
line 1342
;1342:				trap_SendServerCommand( -1, va("cp \"%s\n\"", G_GetStripEdString("SVINGAME", "PLDUELTIE")) );
ADDRGP4 $610
ARGP4
ADDRGP4 $617
ARGP4
ADDRLP4 464
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $616
ARGP4
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 468
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 468
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1343
;1343:			}
line 1344
;1344:		}
ADDRGP4 $591
JUMPV
LABELV $590
line 1346
;1345:		else
;1346:		{
line 1348
;1347:			vec3_t vSub;
;1348:			float subLen = 0;
ADDRLP4 448
CNSTF4 0
ASGNF4
line 1350
;1349:
;1350:			VectorSubtract(ent->client->ps.origin, duelAgainst->client->ps.origin, vSub);
ADDRLP4 464
CNSTI4 408
ASGNI4
ADDRLP4 468
ADDRFP4 0
INDIRP4
ADDRLP4 464
INDIRI4
ADDP4
ASGNP4
ADDRLP4 472
CNSTI4 20
ASGNI4
ADDRLP4 476
ADDRLP4 424
INDIRP4
ADDRLP4 464
INDIRI4
ADDP4
ASGNP4
ADDRLP4 452
ADDRLP4 468
INDIRP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
INDIRF4
ADDRLP4 476
INDIRP4
INDIRP4
ADDRLP4 472
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 480
CNSTI4 24
ASGNI4
ADDRLP4 452+4
ADDRLP4 468
INDIRP4
INDIRP4
ADDRLP4 480
INDIRI4
ADDP4
INDIRF4
ADDRLP4 476
INDIRP4
INDIRP4
ADDRLP4 480
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 484
CNSTI4 408
ASGNI4
ADDRLP4 488
CNSTI4 28
ASGNI4
ADDRLP4 452+8
ADDRFP4 0
INDIRP4
ADDRLP4 484
INDIRI4
ADDP4
INDIRP4
ADDRLP4 488
INDIRI4
ADDP4
INDIRF4
ADDRLP4 424
INDIRP4
ADDRLP4 484
INDIRI4
ADDP4
INDIRP4
ADDRLP4 488
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1351
;1351:			subLen = VectorLength(vSub);
ADDRLP4 452
ARGP4
ADDRLP4 492
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 448
ADDRLP4 492
INDIRF4
ASGNF4
line 1353
;1352:
;1353:			if (cm_duelradius.integer == 0) {
ADDRGP4 cm_duelradius+12
INDIRI4
CNSTI4 0
NEI4 $620
line 1354
;1354:				if (subLen >= 1024)
ADDRLP4 448
INDIRF4
CNSTF4 1149239296
LTF4 $623
line 1355
;1355:				{
line 1356
;1356:					ent->client->ps.duelInProgress = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
CNSTI4 0
ASGNI4
line 1357
;1357:					duelAgainst->client->ps.duelInProgress = 0;
ADDRLP4 424
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
CNSTI4 0
ASGNI4
line 1359
;1358:
;1359:					G_AddEvent(ent, EV_PRIVATE_DUEL, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1360
;1360:					G_AddEvent(duelAgainst, EV_PRIVATE_DUEL, 0);
ADDRLP4 424
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1362
;1361:
;1362:					trap_SendServerCommand( -1, va("print \"%s\n\"", G_GetStripEdString("SVINGAME", "PLDUELSTOP")) );
ADDRGP4 $610
ARGP4
ADDRGP4 $626
ARGP4
ADDRLP4 496
ADDRGP4 G_GetStripEdString
CALLP4
ASGNP4
ADDRGP4 $625
ARGP4
ADDRLP4 496
INDIRP4
ARGP4
ADDRLP4 500
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 -1
ARGI4
ADDRLP4 500
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1363
;1363:				}
LABELV $623
line 1364
;1364:			}
LABELV $620
line 1365
;1365:		}
LABELV $591
LABELV $586
line 1366
;1366:	}
LABELV $562
line 1374
;1367:
;1368:	/*
;1369:	if ( client->ps.powerups[PW_HASTE] ) {
;1370:		client->ps.speed *= 1.3;
;1371:	}
;1372:	*/
;1373:
;1374:	if (client->ps.usingATST && ent->health > 0)
ADDRLP4 424
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRLP4 424
INDIRI4
EQI4 $627
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 424
INDIRI4
LEI4 $627
line 1375
;1375:	{ //we have special shot clip boxes as an ATST
line 1376
;1376:		ent->r.contents |= CONTENTS_NOSHOT;
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 340
ADDP4
ASGNP4
ADDRLP4 428
INDIRP4
ADDRLP4 428
INDIRP4
INDIRI4
CNSTI4 2097152
BORI4
ASGNI4
line 1377
;1377:		ATST_ManageDamageBoxes(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ATST_ManageDamageBoxes
CALLV
pop
line 1378
;1378:	}
ADDRGP4 $628
JUMPV
LABELV $627
line 1380
;1379:	else
;1380:	{
line 1381
;1381:		ent->r.contents &= ~CONTENTS_NOSHOT;
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 340
ADDP4
ASGNP4
ADDRLP4 428
INDIRP4
ADDRLP4 428
INDIRP4
INDIRI4
CNSTI4 -2097153
BANDI4
ASGNI4
line 1382
;1382:		client->damageBoxHandle_Head = 0;
ADDRLP4 4
INDIRP4
CNSTI4 1772
ADDP4
CNSTI4 0
ASGNI4
line 1383
;1383:		client->damageBoxHandle_RLeg = 0;
ADDRLP4 4
INDIRP4
CNSTI4 1776
ADDP4
CNSTI4 0
ASGNI4
line 1384
;1384:		client->damageBoxHandle_LLeg = 0;
ADDRLP4 4
INDIRP4
CNSTI4 1780
ADDP4
CNSTI4 0
ASGNI4
line 1385
;1385:	}
LABELV $628
line 1391
;1386:
;1387:	//rww - moved this stuff into the pmove code so that it's predicted properly
;1388:	//BG_AdjustClientSpeed(&client->ps, &client->pers.cmd, level.time);
;1389:
;1390:	// set up for pmove
;1391:	oldEventSequence = client->ps.eventSequence;
ADDRLP4 396
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 1393
;1392:
;1393:	memset (&pm, 0, sizeof(pm));
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 380
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1395
;1394:
;1395:	if ( ent->flags & FL_FORCE_GESTURE ) {
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $629
line 1396
;1396:		ent->flags &= ~FL_FORCE_GESTURE;
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
ASGNP4
ADDRLP4 428
INDIRP4
ADDRLP4 428
INDIRP4
INDIRI4
CNSTI4 -32769
BANDI4
ASGNI4
line 1397
;1397:		ent->client->pers.cmd.buttons |= BUTTON_GESTURE;
ADDRLP4 432
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1400
ADDP4
ASGNP4
ADDRLP4 432
INDIRP4
ADDRLP4 432
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1398
;1398:	}
LABELV $629
line 1400
;1399:
;1400:	if (ent->client && ent->client->ps.fallingToDeath &&
ADDRLP4 428
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 428
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $631
ADDRLP4 432
ADDRLP4 428
INDIRP4
CNSTI4 1352
ADDP4
INDIRI4
ASGNI4
ADDRLP4 432
INDIRI4
CNSTI4 0
EQI4 $631
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
SUBI4
ADDRLP4 432
INDIRI4
LEI4 $631
line 1402
;1401:		(level.time - FALL_FADE_TIME) > ent->client->ps.fallingToDeath)
;1402:	{ //die!
line 1403
;1403:		player_die(ent, ent, ent, 100000, MOD_FALLING);
ADDRLP4 436
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 436
INDIRP4
ARGP4
ADDRLP4 436
INDIRP4
ARGP4
ADDRLP4 436
INDIRP4
ARGP4
CNSTI4 100000
ARGI4
CNSTI4 34
ARGI4
ADDRGP4 player_die
CALLV
pop
line 1404
;1404:		respawn(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 respawn
CALLV
pop
line 1405
;1405:		ent->client->ps.fallingToDeath = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1352
ADDP4
CNSTI4 0
ASGNI4
line 1407
;1406:
;1407:		G_MuteSound(ent->s.number, CHAN_VOICE); //stop screaming, because you are dead!
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 1408
;1408:	}
LABELV $631
line 1410
;1409:
;1410:	if (ent->client->ps.otherKillerTime > level.time &&
ADDRLP4 436
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 436
INDIRP4
CNSTI4 764
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $634
ADDRLP4 436
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $634
ADDRLP4 436
INDIRP4
CNSTI4 768
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $634
line 1413
;1411:		ent->client->ps.groundEntityNum != ENTITYNUM_NONE &&
;1412:		ent->client->ps.otherKillerDebounceTime < level.time)
;1413:	{
line 1414
;1414:		ent->client->ps.otherKillerTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 764
ADDP4
CNSTI4 0
ASGNI4
line 1415
;1415:		ent->client->ps.otherKiller = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 1023
ASGNI4
line 1416
;1416:	}
ADDRGP4 $635
JUMPV
LABELV $634
line 1417
;1417:	else if (ent->client->ps.otherKillerTime > level.time &&
ADDRLP4 440
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 440
INDIRP4
CNSTI4 764
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $638
ADDRLP4 440
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $638
line 1419
;1418:		ent->client->ps.groundEntityNum == ENTITYNUM_NONE)
;1419:	{
line 1420
;1420:		if (ent->client->ps.otherKillerDebounceTime < (level.time + 100))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 768
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
GEI4 $641
line 1421
;1421:		{
line 1422
;1422:			ent->client->ps.otherKillerDebounceTime = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1423
;1423:		}
LABELV $641
line 1424
;1424:	}
LABELV $638
LABELV $635
line 1429
;1425:
;1426://	WP_ForcePowersUpdate( ent, msec, ucmd); //update any active force powers
;1427://	WP_SaberPositionUpdate(ent, ucmd); //check the server-side saber point, do apprioriate server-side actions (effects are cs-only)
;1428:
;1429:	if ((ent->client->pers.cmd.buttons & BUTTON_USE) && ent->client->ps.useDelay < level.time)
ADDRLP4 444
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
CNSTI4 1400
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $645
ADDRLP4 444
INDIRP4
CNSTI4 1356
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $645
line 1430
;1430:	{
line 1431
;1431:		TryUse(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TryUse
CALLV
pop
line 1432
;1432:		ent->client->ps.useDelay = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1356
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1433
;1433:	}
LABELV $645
line 1435
;1434:
;1435:	pm.ps = &client->ps;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
line 1436
;1436:	pm.cmd = *ucmd;
ADDRLP4 8+4
ADDRLP4 388
INDIRP4
INDIRB
ASGNB 28
line 1437
;1437:	if ( pm.ps->pm_type == PM_DEAD ) {
ADDRLP4 448
CNSTI4 4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 448
INDIRI4
ADDP4
INDIRI4
ADDRLP4 448
INDIRI4
NEI4 $650
line 1438
;1438:		pm.tracemask = MASK_PLAYERSOLID & ~CONTENTS_BODY;
ADDRLP4 8+32
CNSTI4 17
ASGNI4
line 1439
;1439:	}
ADDRGP4 $651
JUMPV
LABELV $650
line 1440
;1440:	else if ( ent->r.svFlags & SVF_BOT ) {
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $653
line 1441
;1441:		pm.tracemask = MASK_PLAYERSOLID | CONTENTS_MONSTERCLIP;
ADDRLP4 8+32
CNSTI4 305
ASGNI4
line 1442
;1442:	}
ADDRGP4 $654
JUMPV
LABELV $653
line 1443
;1443:	else {
line 1444
;1444:		pm.tracemask = MASK_PLAYERSOLID;
ADDRLP4 8+32
CNSTI4 273
ASGNI4
line 1445
;1445:	}
LABELV $654
LABELV $651
line 1446
;1446:	pm.trace = trap_Trace;
ADDRLP4 8+240
ADDRGP4 trap_Trace
ASGNP4
line 1447
;1447:	pm.pointcontents = trap_PointContents;
ADDRLP4 8+244
ADDRGP4 trap_PointContents
ASGNP4
line 1448
;1448:	pm.debugLevel = g_debugMove.integer;
ADDRLP4 8+36
ADDRGP4 g_debugMove+12
INDIRI4
ASGNI4
line 1449
;1449:	pm.noFootsteps = ( g_dmflags.integer & DF_NO_FOOTSTEPS ) > 0;
ADDRGP4 g_dmflags+12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
LEI4 $664
ADDRLP4 452
CNSTI4 1
ASGNI4
ADDRGP4 $665
JUMPV
LABELV $664
ADDRLP4 452
CNSTI4 0
ASGNI4
LABELV $665
ADDRLP4 8+40
ADDRLP4 452
INDIRI4
ASGNI4
line 1451
;1450:
;1451:	pm.pmove_fixed = pmove_fixed.integer | client->pers.pmoveFixed;
ADDRLP4 8+232
ADDRGP4 pmove_fixed+12
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1424
ADDP4
INDIRI4
BORI4
ASGNI4
line 1452
;1452:	pm.pmove_msec = pmove_msec.integer;
ADDRLP4 8+236
ADDRGP4 pmove_msec+12
INDIRI4
ASGNI4
line 1454
;1453:
;1454:	pm.animations = bgGlobalAnimations;//NULL;
ADDRLP4 8+224
ADDRGP4 bgGlobalAnimations
ASGNP4
line 1456
;1455:
;1456:	pm.gametype = g_gametype.integer;
ADDRLP4 8+220
ADDRGP4 g_gametype+12
INDIRI4
ASGNI4
line 1458
;1457:
;1458:	VectorCopy( client->ps.origin, client->oldOrigin );
ADDRLP4 4
INDIRP4
CNSTI4 1732
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1460
;1459:
;1460:	if (level.intermissionQueued != 0 && g_singlePlayer.integer) {
ADDRLP4 460
CNSTI4 0
ASGNI4
ADDRGP4 level+9004
INDIRI4
ADDRLP4 460
INDIRI4
EQI4 $673
ADDRGP4 g_singlePlayer+12
INDIRI4
ADDRLP4 460
INDIRI4
EQI4 $673
line 1461
;1461:		if ( level.time - level.intermissionQueued >= 1000  ) {
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+9004
INDIRI4
SUBI4
CNSTI4 1000
LTI4 $677
line 1462
;1462:			pm.cmd.buttons = 0;
ADDRLP4 8+4+16
CNSTI4 0
ASGNI4
line 1463
;1463:			pm.cmd.forwardmove = 0;
ADDRLP4 8+4+24
CNSTI1 0
ASGNI1
line 1464
;1464:			pm.cmd.rightmove = 0;
ADDRLP4 8+4+25
CNSTI1 0
ASGNI1
line 1465
;1465:			pm.cmd.upmove = 0;
ADDRLP4 8+4+26
CNSTI1 0
ASGNI1
line 1466
;1466:			if ( level.time - level.intermissionQueued >= 2000 && level.time - level.intermissionQueued <= 2500 ) {
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+9004
INDIRI4
SUBI4
CNSTI4 2000
LTI4 $689
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+9004
INDIRI4
SUBI4
CNSTI4 2500
GTI4 $689
line 1467
;1467:				trap_SendConsoleCommand( EXEC_APPEND, "centerview\n");
CNSTI4 2
ARGI4
ADDRGP4 $695
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1468
;1468:			}
LABELV $689
line 1469
;1469:			ent->client->ps.pm_type = PM_SPINTERMISSION;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 7
ASGNI4
line 1470
;1470:		}
LABELV $677
line 1471
;1471:	}
LABELV $673
line 1473
;1472:
;1473:	for ( i = 0 ; i < MAX_CLIENTS ; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $696
line 1474
;1474:	{
line 1475
;1475:		if (g_entities[i].inuse && g_entities[i].client)
ADDRLP4 464
CNSTI4 852
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 464
INDIRI4
ADDRGP4 g_entities+412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $700
ADDRLP4 464
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $700
line 1476
;1476:		{
line 1477
;1477:			pm.bgClients[i] = &g_entities[i].client->ps;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8+248
ADDP4
CNSTI4 852
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
ASGNP4
line 1478
;1478:		}
LABELV $700
line 1479
;1479:	}
LABELV $697
line 1473
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $696
line 1481
;1480:
;1481:	if (ent->client->ps.saberLockTime > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $706
line 1482
;1482:	{
line 1483
;1483:		gentity_t *blockOpp = &g_entities[ent->client->ps.saberLockEnemy];
ADDRLP4 464
CNSTI4 852
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1485
;1484:
;1485:		if (blockOpp && blockOpp->inuse && blockOpp->client)
ADDRLP4 472
CNSTU4 0
ASGNU4
ADDRLP4 464
INDIRP4
CVPU4 4
ADDRLP4 472
INDIRU4
EQU4 $709
ADDRLP4 464
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $709
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 472
INDIRU4
EQU4 $709
line 1486
;1486:		{
line 1490
;1487:			vec3_t lockDir, lockAng;
;1488:
;1489:			//VectorClear( ent->client->ps.velocity );
;1490:			VectorSubtract( blockOpp->r.currentOrigin, ent->r.currentOrigin, lockDir );
ADDRLP4 504
CNSTI4 368
ASGNI4
ADDRLP4 508
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 476
ADDRLP4 464
INDIRP4
ADDRLP4 504
INDIRI4
ADDP4
INDIRF4
ADDRLP4 508
INDIRP4
ADDRLP4 504
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 512
CNSTI4 372
ASGNI4
ADDRLP4 476+4
ADDRLP4 464
INDIRP4
ADDRLP4 512
INDIRI4
ADDP4
INDIRF4
ADDRLP4 508
INDIRP4
ADDRLP4 512
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 516
CNSTI4 376
ASGNI4
ADDRLP4 476+8
ADDRLP4 464
INDIRP4
ADDRLP4 516
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 516
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1492
;1491:			//lockAng[YAW] = vectoyaw( defDir );
;1492:			vectoangles(lockDir, lockAng);
ADDRLP4 476
ARGP4
ADDRLP4 488
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1493
;1493:			SetClientViewAngle( ent, lockAng );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 488
ARGP4
ADDRGP4 SetClientViewAngle
CALLV
pop
line 1494
;1494:		}
LABELV $709
line 1496
;1495:
;1496:		if ( ( ent->client->buttons & BUTTON_ATTACK ) && ! ( ent->client->oldbuttons & BUTTON_ATTACK ) )
ADDRLP4 476
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 480
CNSTI4 1
ASGNI4
ADDRLP4 484
CNSTI4 0
ASGNI4
ADDRLP4 476
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ADDRLP4 480
INDIRI4
BANDI4
ADDRLP4 484
INDIRI4
EQI4 $713
ADDRLP4 476
INDIRP4
CNSTI4 1724
ADDP4
INDIRI4
ADDRLP4 480
INDIRI4
BANDI4
ADDRLP4 484
INDIRI4
NEI4 $713
line 1497
;1497:		{
line 1498
;1498:			ent->client->ps.saberLockHits++;
ADDRLP4 488
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 488
INDIRP4
ADDRLP4 488
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1499
;1499:		}
LABELV $713
line 1500
;1500:		if (ent->client->ps.saberLockHits > 2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 2
LEI4 $707
line 1501
;1501:		{
line 1502
;1502:			if (!ent->client->ps.saberLockAdvance)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 0
NEI4 $717
line 1503
;1503:			{
line 1504
;1504:				ent->client->ps.saberLockHits -= 3;
ADDRLP4 488
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 488
INDIRP4
ADDRLP4 488
INDIRP4
INDIRI4
CNSTI4 3
SUBI4
ASGNI4
line 1505
;1505:			}
LABELV $717
line 1506
;1506:			ent->client->ps.saberLockAdvance = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 540
ADDP4
CNSTI4 1
ASGNI4
line 1507
;1507:		}
line 1508
;1508:	}
ADDRGP4 $707
JUMPV
LABELV $706
line 1510
;1509:	else
;1510:	{
line 1511
;1511:		ent->client->ps.saberLockFrame = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 1513
;1512:		//check for taunt
;1513:		if ( (pm.cmd.generic_cmd == GENCMD_ENGAGE_DUEL) && (g_gametype.integer == GT_TOURNAMENT) )
ADDRLP4 8+4+23
INDIRU1
CVUI4 1
CNSTI4 2
NEI4 $719
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $719
line 1514
;1514:		{//already in a duel, make it a taunt command
line 1515
;1515:			pm.cmd.buttons |= BUTTON_GESTURE;
ADDRLP4 8+4+16
ADDRLP4 8+4+16
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1516
;1516:		}
LABELV $719
line 1517
;1517:	}
LABELV $707
line 1519
;1518:
;1519:	Pmove (&pm);
ADDRLP4 8
ARGP4
ADDRGP4 Pmove
CALLV
pop
line 1521
;1520:
;1521:	if (pm.checkDuelLoss)
ADDRLP4 8+376
INDIRI4
CNSTI4 0
EQI4 $726
line 1522
;1522:	{
line 1523
;1523:		if (pm.checkDuelLoss > 0 && pm.checkDuelLoss <= MAX_CLIENTS)
ADDRLP4 8+376
INDIRI4
CNSTI4 0
LEI4 $729
ADDRLP4 8+376
INDIRI4
CNSTI4 32
GTI4 $729
line 1524
;1524:		{
line 1525
;1525:			gentity_t *clientLost = &g_entities[pm.checkDuelLoss-1];
ADDRLP4 464
CNSTI4 852
ADDRLP4 8+376
INDIRI4
MULI4
ADDRGP4 g_entities-852
ADDP4
ASGNP4
line 1527
;1526:
;1527:			if (clientLost && clientLost->inuse && clientLost->client && Q_irand(0, 40) > clientLost->health)
ADDRLP4 472
CNSTU4 0
ASGNU4
ADDRLP4 464
INDIRP4
CVPU4 4
ADDRLP4 472
INDIRU4
EQU4 $735
ADDRLP4 476
CNSTI4 0
ASGNI4
ADDRLP4 464
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 476
INDIRI4
EQI4 $735
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 472
INDIRU4
EQU4 $735
ADDRLP4 476
INDIRI4
ARGI4
CNSTI4 40
ARGI4
ADDRLP4 480
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 480
INDIRI4
ADDRLP4 464
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
LEI4 $735
line 1528
;1528:			{
line 1530
;1529:				vec3_t attDir;
;1530:				VectorSubtract(ent->client->ps.origin, clientLost->client->ps.origin, attDir);
ADDRLP4 496
CNSTI4 408
ASGNI4
ADDRLP4 500
ADDRFP4 0
INDIRP4
ADDRLP4 496
INDIRI4
ADDP4
ASGNP4
ADDRLP4 504
CNSTI4 20
ASGNI4
ADDRLP4 508
ADDRLP4 464
INDIRP4
ADDRLP4 496
INDIRI4
ADDP4
ASGNP4
ADDRLP4 484
ADDRLP4 500
INDIRP4
INDIRP4
ADDRLP4 504
INDIRI4
ADDP4
INDIRF4
ADDRLP4 508
INDIRP4
INDIRP4
ADDRLP4 504
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 512
CNSTI4 24
ASGNI4
ADDRLP4 484+4
ADDRLP4 500
INDIRP4
INDIRP4
ADDRLP4 512
INDIRI4
ADDP4
INDIRF4
ADDRLP4 508
INDIRP4
INDIRP4
ADDRLP4 512
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 516
CNSTI4 408
ASGNI4
ADDRLP4 520
CNSTI4 28
ASGNI4
ADDRLP4 484+8
ADDRFP4 0
INDIRP4
ADDRLP4 516
INDIRI4
ADDP4
INDIRP4
ADDRLP4 520
INDIRI4
ADDP4
INDIRF4
ADDRLP4 464
INDIRP4
ADDRLP4 516
INDIRI4
ADDP4
INDIRP4
ADDRLP4 520
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1531
;1531:				VectorNormalize(attDir);
ADDRLP4 484
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1533
;1532:
;1533:				VectorClear(clientLost->client->ps.velocity);
ADDRLP4 524
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 528
CNSTF4 0
ASGNF4
ADDRLP4 524
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 528
INDIRF4
ASGNF4
ADDRLP4 524
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 528
INDIRF4
ASGNF4
ADDRLP4 524
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 528
INDIRF4
ASGNF4
line 1534
;1534:				clientLost->client->ps.forceHandExtend = HANDEXTEND_NONE;
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 0
ASGNI4
line 1535
;1535:				clientLost->client->ps.forceHandExtendTime = 0;
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1252
ADDP4
CNSTI4 0
ASGNI4
line 1537
;1536:
;1537:				gGAvoidDismember = 1;
ADDRGP4 gGAvoidDismember
CNSTI4 1
ASGNI4
line 1538
;1538:				G_Damage(clientLost, ent, ent, attDir, clientLost->client->ps.origin, 9999, DAMAGE_NO_PROTECTION, MOD_SABER);
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 536
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 536
INDIRP4
ARGP4
ADDRLP4 536
INDIRP4
ARGP4
ADDRLP4 484
ARGP4
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 9999
ARGI4
CNSTI4 8
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1540
;1539:
;1540:				if (clientLost->health < 1)
ADDRLP4 464
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $739
line 1541
;1541:				{
line 1542
;1542:					gGAvoidDismember = 2;
ADDRGP4 gGAvoidDismember
CNSTI4 2
ASGNI4
line 1543
;1543:					G_CheckForDismemberment(clientLost, clientLost->client->ps.origin, 999, (clientLost->client->ps.legsAnim&~ANIM_TOGGLEBIT));
ADDRLP4 464
INDIRP4
ARGP4
ADDRLP4 544
ADDRLP4 464
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 544
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 999
ARGI4
ADDRLP4 544
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ARGI4
ADDRGP4 G_CheckForDismemberment
CALLV
pop
line 1544
;1544:				}
LABELV $739
line 1546
;1545:
;1546:				gGAvoidDismember = 0;
ADDRGP4 gGAvoidDismember
CNSTI4 0
ASGNI4
line 1547
;1547:			}
LABELV $735
line 1548
;1548:		}
LABELV $729
line 1550
;1549:
;1550:		pm.checkDuelLoss = 0;
ADDRLP4 8+376
CNSTI4 0
ASGNI4
line 1551
;1551:	}
LABELV $726
line 1553
;1552:
;1553:	switch(pm.cmd.generic_cmd)
ADDRLP4 464
ADDRLP4 8+4+23
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 464
INDIRI4
CNSTI4 0
LTI4 $743
ADDRLP4 464
INDIRI4
CNSTI4 20
GTI4 $743
ADDRLP4 464
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $787
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $787
address $743
address $748
address $749
address $753
address $754
address $755
address $756
address $757
address $758
address $759
address $760
address $761
address $762
address $763
address $764
address $767
address $770
address $773
address $778
address $783
address $786
code
line 1554
;1554:	{
line 1556
;1555:	case 0:
;1556:		break;
LABELV $748
line 1558
;1557:	case GENCMD_SABERSWITCH:
;1558:		Cmd_ToggleSaber_f(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_ToggleSaber_f
CALLV
pop
line 1559
;1559:		break;
ADDRGP4 $743
JUMPV
LABELV $749
line 1561
;1560:	case GENCMD_ENGAGE_DUEL:
;1561:		if ( g_gametype.integer == GT_TOURNAMENT )
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $750
line 1562
;1562:		{//already in a duel, made it a taunt command
line 1563
;1563:		}
ADDRGP4 $743
JUMPV
LABELV $750
line 1565
;1564:		else
;1565:		{
line 1566
;1566:			Cmd_EngageDuel_f(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_EngageDuel_f
CALLV
pop
line 1567
;1567:		}
line 1568
;1568:		break;
ADDRGP4 $743
JUMPV
LABELV $753
line 1570
;1569:	case GENCMD_FORCE_HEAL:
;1570:		ForceHeal(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceHeal
CALLV
pop
line 1571
;1571:		break;
ADDRGP4 $743
JUMPV
LABELV $754
line 1573
;1572:	case GENCMD_FORCE_SPEED:
;1573:		ForceSpeed(ent, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 ForceSpeed
CALLV
pop
line 1574
;1574:		break;
ADDRGP4 $743
JUMPV
LABELV $755
line 1576
;1575:	case GENCMD_FORCE_THROW:
;1576:		ForceThrow(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 ForceThrow
CALLV
pop
line 1577
;1577:		break;
ADDRGP4 $743
JUMPV
LABELV $756
line 1579
;1578:	case GENCMD_FORCE_PULL:
;1579:		ForceThrow(ent, qtrue);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 ForceThrow
CALLV
pop
line 1580
;1580:		break;
ADDRGP4 $743
JUMPV
LABELV $757
line 1582
;1581:	case GENCMD_FORCE_DISTRACT:
;1582:		ForceTelepathy(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTelepathy
CALLV
pop
line 1583
;1583:		break;
ADDRGP4 $743
JUMPV
LABELV $758
line 1585
;1584:	case GENCMD_FORCE_RAGE:
;1585:		ForceRage(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceRage
CALLV
pop
line 1586
;1586:		break;
ADDRGP4 $743
JUMPV
LABELV $759
line 1588
;1587:	case GENCMD_FORCE_PROTECT:
;1588:		ForceProtect(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceProtect
CALLV
pop
line 1589
;1589:		break;
ADDRGP4 $743
JUMPV
LABELV $760
line 1591
;1590:	case GENCMD_FORCE_ABSORB:
;1591:		ForceAbsorb(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceAbsorb
CALLV
pop
line 1592
;1592:		break;
ADDRGP4 $743
JUMPV
LABELV $761
line 1594
;1593:	case GENCMD_FORCE_HEALOTHER:
;1594:		ForceTeamHeal(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTeamHeal
CALLV
pop
line 1595
;1595:		break;
ADDRGP4 $743
JUMPV
LABELV $762
line 1597
;1596:	case GENCMD_FORCE_FORCEPOWEROTHER:
;1597:		ForceTeamForceReplenish(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTeamForceReplenish
CALLV
pop
line 1598
;1598:		break;
ADDRGP4 $743
JUMPV
LABELV $763
line 1600
;1599:	case GENCMD_FORCE_SEEING:
;1600:		ForceSeeing(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceSeeing
CALLV
pop
line 1601
;1601:		break;
ADDRGP4 $743
JUMPV
LABELV $764
line 1603
;1602:	case GENCMD_USE_SEEKER:
;1603:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_SEEKER)) &&
ADDRLP4 472
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 472
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 472
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 476
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 476
INDIRI4
CNSTI4 0
EQI4 $743
line 1605
;1604:			G_ItemUsable(&ent->client->ps, HI_SEEKER) )
;1605:		{
line 1606
;1606:			ItemUse_Seeker(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Seeker
CALLV
pop
line 1607
;1607:			G_AddEvent(ent, EV_USE_ITEM0+HI_SEEKER, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 41
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1608
;1608:			ent->client->ps.stats[STAT_HOLDABLE_ITEMS] &= ~(1 << HI_SEEKER);
ADDRLP4 480
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 480
INDIRP4
ADDRLP4 480
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 1609
;1609:		}
line 1610
;1610:		break;
ADDRGP4 $743
JUMPV
LABELV $767
line 1612
;1611:	case GENCMD_USE_FIELD:
;1612:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_SHIELD)) &&
ADDRLP4 480
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 480
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 480
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 484
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 484
INDIRI4
CNSTI4 0
EQI4 $743
line 1614
;1613:			G_ItemUsable(&ent->client->ps, HI_SHIELD) )
;1614:		{
line 1615
;1615:			ItemUse_Shield(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Shield
CALLV
pop
line 1616
;1616:			G_AddEvent(ent, EV_USE_ITEM0+HI_SHIELD, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 42
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1617
;1617:			ent->client->ps.stats[STAT_HOLDABLE_ITEMS] &= ~(1 << HI_SHIELD);
ADDRLP4 488
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 488
INDIRP4
ADDRLP4 488
INDIRP4
INDIRI4
CNSTI4 -5
BANDI4
ASGNI4
line 1618
;1618:		}
line 1619
;1619:		break;
ADDRGP4 $743
JUMPV
LABELV $770
line 1621
;1620:	case GENCMD_USE_BACTA:
;1621:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_MEDPAC)) &&
ADDRLP4 488
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 488
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 488
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 492
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 492
INDIRI4
CNSTI4 0
EQI4 $743
line 1623
;1622:			G_ItemUsable(&ent->client->ps, HI_MEDPAC) )
;1623:		{
line 1624
;1624:			ItemUse_MedPack(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_MedPack
CALLV
pop
line 1625
;1625:			G_AddEvent(ent, EV_USE_ITEM0+HI_MEDPAC, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 43
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1626
;1626:			ent->client->ps.stats[STAT_HOLDABLE_ITEMS] &= ~(1 << HI_MEDPAC);
ADDRLP4 496
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 496
INDIRP4
ADDRLP4 496
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 1627
;1627:		}
line 1628
;1628:		break;
ADDRGP4 $743
JUMPV
LABELV $773
line 1630
;1629:	case GENCMD_USE_ELECTROBINOCULARS:
;1630:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_BINOCULARS)) &&
ADDRLP4 496
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 496
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 496
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 500
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 500
INDIRI4
CNSTI4 0
EQI4 $743
line 1632
;1631:			G_ItemUsable(&ent->client->ps, HI_BINOCULARS) )
;1632:		{
line 1633
;1633:			ItemUse_Binoculars(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Binoculars
CALLV
pop
line 1634
;1634:			if (ent->client->ps.zoomMode == 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1332
ADDP4
INDIRI4
CNSTI4 0
NEI4 $776
line 1635
;1635:			{
line 1636
;1636:				G_AddEvent(ent, EV_USE_ITEM0+HI_BINOCULARS, 1);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 45
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1637
;1637:			}
ADDRGP4 $743
JUMPV
LABELV $776
line 1639
;1638:			else
;1639:			{
line 1640
;1640:				G_AddEvent(ent, EV_USE_ITEM0+HI_BINOCULARS, 2);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 45
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1641
;1641:			}
line 1642
;1642:		}
line 1643
;1643:		break;
ADDRGP4 $743
JUMPV
LABELV $778
line 1645
;1644:	case GENCMD_ZOOM:
;1645:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_BINOCULARS)) &&
ADDRLP4 504
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 504
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 504
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 508
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 508
INDIRI4
CNSTI4 0
EQI4 $743
line 1647
;1646:			G_ItemUsable(&ent->client->ps, HI_BINOCULARS) )
;1647:		{
line 1648
;1648:			ItemUse_Binoculars(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Binoculars
CALLV
pop
line 1649
;1649:			if (ent->client->ps.zoomMode == 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1332
ADDP4
INDIRI4
CNSTI4 0
NEI4 $781
line 1650
;1650:			{
line 1651
;1651:				G_AddEvent(ent, EV_USE_ITEM0+HI_BINOCULARS, 1);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 45
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1652
;1652:			}
ADDRGP4 $743
JUMPV
LABELV $781
line 1654
;1653:			else
;1654:			{
line 1655
;1655:				G_AddEvent(ent, EV_USE_ITEM0+HI_BINOCULARS, 2);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 45
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1656
;1656:			}
line 1657
;1657:		}
line 1658
;1658:		break;
ADDRGP4 $743
JUMPV
LABELV $783
line 1660
;1659:	case GENCMD_USE_SENTRY:
;1660:		if ( (ent->client->ps.stats[STAT_HOLDABLE_ITEMS] & (1 << HI_SENTRY_GUN)) &&
ADDRLP4 512
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 512
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $743
ADDRLP4 512
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 516
ADDRGP4 G_ItemUsable
CALLI4
ASGNI4
ADDRLP4 516
INDIRI4
CNSTI4 0
EQI4 $743
line 1662
;1661:			G_ItemUsable(&ent->client->ps, HI_SENTRY_GUN) )
;1662:		{
line 1663
;1663:			ItemUse_Sentry(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ItemUse_Sentry
CALLV
pop
line 1664
;1664:			G_AddEvent(ent, EV_USE_ITEM0+HI_SENTRY_GUN, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 46
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1665
;1665:			ent->client->ps.stats[STAT_HOLDABLE_ITEMS] &= ~(1 << HI_SENTRY_GUN);
ADDRLP4 520
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 520
INDIRP4
ADDRLP4 520
INDIRP4
INDIRI4
CNSTI4 -65
BANDI4
ASGNI4
line 1666
;1666:		}
line 1667
;1667:		break;
ADDRGP4 $743
JUMPV
LABELV $786
line 1669
;1668:	case GENCMD_SABERATTACKCYCLE:
;1669:		Cmd_SaberAttackCycle_f(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_SaberAttackCycle_f
CALLV
pop
line 1670
;1670:		break;
line 1672
;1671:	default:
;1672:		break;
LABELV $743
line 1676
;1673:	}
;1674:
;1675:	// save results of pmove
;1676:	if ( ent->client->ps.eventSequence != oldEventSequence ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 396
INDIRI4
EQI4 $788
line 1677
;1677:		ent->eventTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1678
;1678:	}
LABELV $788
line 1679
;1679:	if (g_smoothClients.integer) {
ADDRGP4 g_smoothClients+12
INDIRI4
CNSTI4 0
EQI4 $791
line 1680
;1680:		BG_PlayerStateToEntityStateExtraPolate( &ent->client->ps, &ent->s, ent->client->ps.commandTime, qtrue );
ADDRLP4 472
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 476
ADDRLP4 472
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 476
INDIRP4
ARGP4
ADDRLP4 472
INDIRP4
ARGP4
ADDRLP4 476
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 BG_PlayerStateToEntityStateExtraPolate
CALLV
pop
line 1681
;1681:	}
ADDRGP4 $792
JUMPV
LABELV $791
line 1682
;1682:	else {
line 1683
;1683:		BG_PlayerStateToEntityState( &ent->client->ps, &ent->s, qtrue );
ADDRLP4 472
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 472
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 472
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 BG_PlayerStateToEntityState
CALLV
pop
line 1684
;1684:	}
LABELV $792
line 1685
;1685:	SendPendingPredictableEvents( &ent->client->ps );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRGP4 SendPendingPredictableEvents
CALLV
pop
line 1692
;1686:	
;1687:	/*if ( !( ent->client->ps.eFlags & EF_FIRING ) ) {
;1688:		client->fireHeld = qfalse;		// for grapple
;1689:	}*/
;1690:
;1691:	// use the snapped origin for linking so it matches client predicted versions
;1692:	VectorCopy( ent->s.pos.trBase, ent->r.currentOrigin );
ADDRLP4 472
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 472
INDIRP4
CNSTI4 368
ADDP4
ADDRLP4 472
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1694
;1693:
;1694:	VectorCopy (pm.mins, ent->r.mins);
ADDRFP4 0
INDIRP4
CNSTI4 316
ADDP4
ADDRLP4 8+188
INDIRB
ASGNB 12
line 1695
;1695:	VectorCopy (pm.maxs, ent->r.maxs);
ADDRFP4 0
INDIRP4
CNSTI4 328
ADDP4
ADDRLP4 8+200
INDIRB
ASGNB 12
line 1697
;1696:
;1697:	ent->waterlevel = pm.waterlevel;
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
ADDRLP4 8+216
INDIRI4
ASGNI4
line 1698
;1698:	ent->watertype = pm.watertype;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ADDRLP4 8+212
INDIRI4
ASGNI4
line 1701
;1699:
;1700:	// execute client events
;1701:	ClientEvents( ent, oldEventSequence );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 396
INDIRI4
ARGI4
ADDRGP4 ClientEvents
CALLV
pop
line 1703
;1702:
;1703:	if ( pm.useEvent )
ADDRLP4 8+184
INDIRI4
CNSTI4 0
EQI4 $798
line 1704
;1704:	{
line 1707
;1705:		//TODO: Use
;1706://		TryUse( ent );
;1707:	}
LABELV $798
line 1710
;1708:
;1709:	// link entity now, after any personal teleporters have been used
;1710:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1711
;1711:	if ( !ent->client->noclip ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1712
ADDP4
INDIRI4
CNSTI4 0
NEI4 $801
line 1712
;1712:		G_TouchTriggers( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_TouchTriggers
CALLV
pop
line 1713
;1713:	}
LABELV $801
line 1716
;1714:
;1715:	// NOTE: now copy the exact origin over otherwise clients can be snapped into solid
;1716:	VectorCopy( ent->client->ps.origin, ent->r.currentOrigin );
ADDRLP4 476
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 476
INDIRP4
CNSTI4 368
ADDP4
ADDRLP4 476
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1722
;1717:
;1718:	//test for solid areas in the AAS file
;1719://	BotTestAAS(ent->r.currentOrigin);
;1720:
;1721:	// touch other objects
;1722:	ClientImpacts( ent, &pm );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 ClientImpacts
CALLV
pop
line 1725
;1723:
;1724:	// save results of triggers and client events
;1725:	if (ent->client->ps.eventSequence != oldEventSequence) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 396
INDIRI4
EQI4 $803
line 1726
;1726:		ent->eventTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1727
;1727:	}
LABELV $803
line 1730
;1728:
;1729:	// swap and latch button actions
;1730:	client->oldbuttons = client->buttons;
ADDRLP4 4
INDIRP4
CNSTI4 1724
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ASGNI4
line 1731
;1731:	client->buttons = ucmd->buttons;
ADDRLP4 4
INDIRP4
CNSTI4 1720
ADDP4
ADDRLP4 388
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1732
;1732:	client->latched_buttons |= client->buttons & ~client->oldbuttons;
ADDRLP4 488
ADDRLP4 4
INDIRP4
CNSTI4 1728
ADDP4
ASGNP4
ADDRLP4 488
INDIRP4
ADDRLP4 488
INDIRP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1720
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1724
ADDP4
INDIRI4
BCOMI4
BANDI4
BORI4
ASGNI4
line 1735
;1733:
;1734:	// Did we kick someone in our pmove sequence?
;1735:	if (client->ps.forceKickFlip)
ADDRLP4 4
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
CNSTI4 0
EQI4 $806
line 1736
;1736:	{
line 1737
;1737:		gentity_t *faceKicked = &g_entities[client->ps.forceKickFlip-1];
ADDRLP4 492
CNSTI4 852
ADDRLP4 4
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities-852
ADDP4
ASGNP4
line 1739
;1738:
;1739:		if (faceKicked && faceKicked->client && (!OnSameTeam(ent, faceKicked) || g_friendlyFire.integer) &&
ADDRLP4 500
CNSTU4 0
ASGNU4
ADDRLP4 492
INDIRP4
CVPU4 4
ADDRLP4 500
INDIRU4
EQU4 $809
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 500
INDIRU4
EQU4 $809
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 492
INDIRP4
ARGP4
ADDRLP4 504
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 508
CNSTI4 0
ASGNI4
ADDRLP4 504
INDIRI4
ADDRLP4 508
INDIRI4
EQI4 $812
ADDRGP4 g_friendlyFire+12
INDIRI4
ADDRLP4 508
INDIRI4
EQI4 $809
LABELV $812
ADDRLP4 512
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 512
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $813
ADDRLP4 512
INDIRP4
CNSTI4 1296
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $809
LABELV $813
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 516
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $814
ADDRLP4 516
INDIRP4
CNSTI4 1296
ADDP4
INDIRI4
ADDRLP4 492
INDIRP4
INDIRI4
NEI4 $809
LABELV $814
line 1742
;1740:			(!faceKicked->client->ps.duelInProgress || faceKicked->client->ps.duelIndex == ent->s.number) &&
;1741:			(!ent->client->ps.duelInProgress || ent->client->ps.duelIndex == faceKicked->s.number))
;1742:		{
line 1743
;1743:			if ( faceKicked && faceKicked->client && faceKicked->health && faceKicked->takedamage )
ADDRLP4 524
CNSTU4 0
ASGNU4
ADDRLP4 492
INDIRP4
CVPU4 4
ADDRLP4 524
INDIRU4
EQU4 $815
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 524
INDIRU4
EQU4 $815
ADDRLP4 528
CNSTI4 0
ASGNI4
ADDRLP4 492
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 528
INDIRI4
EQI4 $815
ADDRLP4 492
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 528
INDIRI4
EQI4 $815
line 1744
;1744:			{//push them away and do pain
line 1746
;1745:				vec3_t oppDir;
;1746:				int strength = (int)VectorNormalize2( client->ps.velocity, oppDir );
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 536
ARGP4
ADDRLP4 548
ADDRGP4 VectorNormalize2
CALLF4
ASGNF4
ADDRLP4 532
ADDRLP4 548
INDIRF4
CVFI4 4
ASGNI4
line 1748
;1747:
;1748:				strength *= 0.05;
ADDRLP4 532
CNSTF4 1028443341
ADDRLP4 532
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 1750
;1749:
;1750:				VectorScale( oppDir, -1, oppDir );
ADDRLP4 552
CNSTF4 3212836864
ASGNF4
ADDRLP4 536
ADDRLP4 552
INDIRF4
ADDRLP4 536
INDIRF4
MULF4
ASGNF4
ADDRLP4 536+4
ADDRLP4 552
INDIRF4
ADDRLP4 536+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 536+8
CNSTF4 3212836864
ADDRLP4 536+8
INDIRF4
MULF4
ASGNF4
line 1752
;1751:
;1752:				G_Damage( faceKicked, ent, ent, oppDir, client->ps.origin, strength, DAMAGE_NO_ARMOR, MOD_MELEE );
ADDRLP4 492
INDIRP4
ARGP4
ADDRLP4 556
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 556
INDIRP4
ARGP4
ADDRLP4 556
INDIRP4
ARGP4
ADDRLP4 536
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 532
INDIRI4
ARGI4
ADDRLP4 560
CNSTI4 2
ASGNI4
ADDRLP4 560
INDIRI4
ARGI4
ADDRLP4 560
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1754
;1753:
;1754:				ent->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 564
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 564
INDIRP4
ADDRLP4 564
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 1755
;1755:				ent->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
CNSTI4 0
ASGNI4
line 1757
;1756:
;1757:				if ( faceKicked->client->ps.weapon != WP_SABER ||
ADDRLP4 568
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 568
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $824
ADDRLP4 568
INDIRP4
CNSTI4 1228
ADDP4
INDIRI4
CNSTI4 3
LTI4 $824
ADDRLP4 568
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 572
ADDRGP4 BG_SaberInAttack
CALLI4
ASGNI4
ADDRLP4 572
INDIRI4
CNSTI4 0
NEI4 $821
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 576
ADDRGP4 PM_SaberInStart
CALLI4
ASGNI4
ADDRLP4 576
INDIRI4
CNSTI4 0
NEI4 $821
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 580
ADDRGP4 PM_SaberInReturn
CALLI4
ASGNI4
ADDRLP4 580
INDIRI4
CNSTI4 0
NEI4 $821
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 584
ADDRGP4 PM_SaberInTransition
CALLI4
ASGNI4
ADDRLP4 584
INDIRI4
CNSTI4 0
NEI4 $821
LABELV $824
line 1760
;1758:					 faceKicked->client->ps.fd.saberAnimLevel < FORCE_LEVEL_3 ||
;1759:					 (!BG_SaberInAttack(faceKicked->client->ps.saberMove) && !PM_SaberInStart(faceKicked->client->ps.saberMove) && !PM_SaberInReturn(faceKicked->client->ps.saberMove) && !PM_SaberInTransition(faceKicked->client->ps.saberMove)) )
;1760:				{
line 1761
;1761:					if (faceKicked->health > 0 &&
ADDRLP4 592
CNSTI4 0
ASGNI4
ADDRLP4 492
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 592
INDIRI4
LEI4 $825
ADDRLP4 596
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 596
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 592
INDIRI4
LEI4 $825
ADDRLP4 596
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 8
EQI4 $825
line 1764
;1762:						faceKicked->client->ps.stats[STAT_HEALTH] > 0 &&
;1763:						faceKicked->client->ps.forceHandExtend != HANDEXTEND_KNOCKDOWN)
;1764:					{
line 1765
;1765:						if (Q_irand(1, 10) <= 3)
CNSTI4 1
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 600
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 600
INDIRI4
CNSTI4 3
GTI4 $827
line 1766
;1766:						{ //only actually knock over sometimes, but always do velocity hit
line 1767
;1767:							faceKicked->client->ps.forceHandExtend = HANDEXTEND_KNOCKDOWN;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 8
ASGNI4
line 1768
;1768:							faceKicked->client->ps.forceHandExtendTime = level.time + 1100;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1252
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1100
ADDI4
ASGNI4
line 1769
;1769:							faceKicked->client->ps.forceDodgeAnim = 0; //this toggles between 1 and 0, when it's 1 we should play the get up anim
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1260
ADDP4
CNSTI4 0
ASGNI4
line 1770
;1770:						}
LABELV $827
line 1772
;1771:
;1772:						faceKicked->client->ps.otherKiller = ent->s.number;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1773
;1773:						faceKicked->client->ps.otherKillerTime = level.time + 5000;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 764
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 1774
;1774:						faceKicked->client->ps.otherKillerDebounceTime = level.time + 100;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1776
;1775:
;1776:						faceKicked->client->ps.velocity[0] = oppDir[0]*(strength*40);
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 536
INDIRF4
CNSTI4 40
ADDRLP4 532
INDIRI4
MULI4
CVIF4 4
MULF4
ASGNF4
line 1777
;1777:						faceKicked->client->ps.velocity[1] = oppDir[1]*(strength*40);
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 536+4
INDIRF4
CNSTI4 40
ADDRLP4 532
INDIRI4
MULI4
CVIF4 4
MULF4
ASGNF4
line 1778
;1778:						faceKicked->client->ps.velocity[2] = 200;
ADDRLP4 492
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1128792064
ASGNF4
line 1779
;1779:					}
LABELV $825
line 1780
;1780:				}
LABELV $821
line 1782
;1781:
;1782:				G_Sound( faceKicked, CHAN_AUTO, G_SoundIndex( va("sound/weapons/melee/punch%d", Q_irand(1, 4)) ) );
CNSTI4 1
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 588
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRGP4 $833
ARGP4
ADDRLP4 588
INDIRI4
ARGI4
ADDRLP4 592
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 592
INDIRP4
ARGP4
ADDRLP4 596
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 492
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 596
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1783
;1783:			}
LABELV $815
line 1784
;1784:		}
LABELV $809
line 1786
;1785:
;1786:		client->ps.forceKickFlip = 0;
ADDRLP4 4
INDIRP4
CNSTI4 1292
ADDP4
CNSTI4 0
ASGNI4
line 1787
;1787:	}
LABELV $806
line 1790
;1788:
;1789:	// check for respawning
;1790:	if ( client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $834
line 1792
;1791:		// wait for the attack button to be pressed
;1792:		if ( level.time > client->respawnTime && !gDoSlowMoDuel ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1808
ADDP4
INDIRI4
LEI4 $836
ADDRGP4 gDoSlowMoDuel
INDIRI4
CNSTI4 0
NEI4 $836
line 1794
;1793:			// forcerespawn is to prevent users from waiting out powerups
;1794:			if ( g_forcerespawn.integer > 0 && 
ADDRGP4 g_forcerespawn+12
INDIRI4
CNSTI4 0
LEI4 $839
ADDRGP4 level+32
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1808
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
ADDRGP4 g_forcerespawn+12
INDIRI4
MULI4
LEI4 $839
line 1795
;1795:				( level.time - client->respawnTime ) > g_forcerespawn.integer * 1000 ) {
line 1796
;1796:				respawn( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 respawn
CALLV
pop
line 1797
;1797:				return;
ADDRGP4 $482
JUMPV
LABELV $839
line 1801
;1798:			}
;1799:		
;1800:			// pressing attack or use is the normal respawn method
;1801:			if ( ucmd->buttons & ( BUTTON_ATTACK | BUTTON_USE_HOLDABLE ) ) {
ADDRLP4 388
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 5
BANDI4
CNSTI4 0
EQI4 $482
line 1802
;1802:				respawn( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 respawn
CALLV
pop
line 1803
;1803:			}
line 1804
;1804:		}
ADDRGP4 $482
JUMPV
LABELV $836
line 1805
;1805:		else if (gDoSlowMoDuel)
ADDRGP4 gDoSlowMoDuel
INDIRI4
CNSTI4 0
EQI4 $482
line 1806
;1806:		{
line 1807
;1807:			client->respawnTime = level.time + 1000;
ADDRLP4 4
INDIRP4
CNSTI4 1808
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1808
;1808:		}
line 1809
;1809:		return;
ADDRGP4 $482
JUMPV
LABELV $834
line 1813
;1810:	}
;1811:
;1812:	// perform once-a-second actions
;1813:	ClientTimerActions( ent, msec );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 392
INDIRI4
ARGI4
ADDRGP4 ClientTimerActions
CALLV
pop
line 1815
;1814:
;1815:	G_UpdateClientBroadcasts ( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_UpdateClientBroadcasts
CALLV
pop
line 1816
;1816:}
LABELV $482
endproc ClientThink_real 604 32
export G_CheckClientTimeouts
proc G_CheckClientTimeouts 0 8
line 1826
;1817:
;1818:/*
;1819:==================
;1820:G_CheckClientTimeouts
;1821:
;1822:Checks whether a client has exceded any timeouts and act accordingly
;1823:==================
;1824:*/
;1825:void G_CheckClientTimeouts ( gentity_t *ent )
;1826:{
line 1828
;1827:	// Only timeout supported right now is the timeout to spectator mode
;1828:	if ( !g_timeouttospec.integer )
ADDRGP4 g_timeouttospec+12
INDIRI4
CNSTI4 0
NEI4 $850
line 1829
;1829:	{
line 1830
;1830:		return;
ADDRGP4 $849
JUMPV
LABELV $850
line 1834
;1831:	}
;1832:
;1833:	// Already a spectator, no need to boot them to spectator
;1834:	if ( ent->client->sess.sessionTeam == TEAM_SPECTATOR )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
NEI4 $853
line 1835
;1835:	{
line 1836
;1836:		return;
ADDRGP4 $849
JUMPV
LABELV $853
line 1841
;1837:	}
;1838:
;1839:	// See how long its been since a command was received by the client and if its 
;1840:	// longer than the timeout to spectator then force this client into spectator mode
;1841:	if ( level.time - ent->client->pers.cmd.serverTime > g_timeouttospec.integer * 1000 )
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
ADDRGP4 g_timeouttospec+12
INDIRI4
MULI4
LEI4 $855
line 1842
;1842:	{
line 1843
;1843:		SetTeam ( ent, "spectator" );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $558
ARGP4
ADDRGP4 SetTeam
CALLV
pop
line 1844
;1844:	}
LABELV $855
line 1845
;1845:}
LABELV $849
endproc G_CheckClientTimeouts 0 8
export ClientThink
proc ClientThink 8 8
line 1854
;1846:
;1847:/*
;1848:==================
;1849:ClientThink
;1850:
;1851:A new command has arrived from the client
;1852:==================
;1853:*/
;1854:void ClientThink( int clientNum ) {
line 1857
;1855:	gentity_t *ent;
;1856:
;1857:	ent = g_entities + clientNum;
ADDRLP4 0
CNSTI4 852
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1858
;1858:	trap_GetUsercmd( clientNum, &ent->client->pers.cmd );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ARGP4
ADDRGP4 trap_GetUsercmd
CALLV
pop
line 1862
;1859:
;1860:	// mark the time we got info, so we can display the
;1861:	// phone jack if they don't get any for a while
;1862:	ent->client->lastCmdTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1716
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1864
;1863:
;1864:	if ( !(ent->r.svFlags & SVF_BOT) && !g_synchronousClients.integer ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 4
INDIRI4
NEI4 $861
ADDRGP4 g_synchronousClients+12
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $861
line 1865
;1865:		ClientThink_real( ent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 ClientThink_real
CALLV
pop
line 1866
;1866:	}
LABELV $861
line 1867
;1867:}
LABELV $859
endproc ClientThink 8 8
export G_RunClient
proc G_RunClient 4 4
line 1870
;1868:
;1869:
;1870:void G_RunClient( gentity_t *ent ) {
line 1871
;1871:	if ( !(ent->r.svFlags & SVF_BOT) && !g_synchronousClients.integer ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 0
INDIRI4
NEI4 $865
ADDRGP4 g_synchronousClients+12
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $865
line 1872
;1872:		return;
ADDRGP4 $864
JUMPV
LABELV $865
line 1874
;1873:	}
;1874:	ent->client->pers.cmd.serverTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1384
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1875
;1875:	ClientThink_real( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ClientThink_real
CALLV
pop
line 1876
;1876:}
LABELV $864
endproc G_RunClient 4 4
export SpectatorClientEndFrame
proc SpectatorClientEndFrame 24 8
line 1885
;1877:
;1878:
;1879:/*
;1880:==================
;1881:SpectatorClientEndFrame
;1882:
;1883:==================
;1884:*/
;1885:void SpectatorClientEndFrame( gentity_t *ent ) {
line 1889
;1886:	gclient_t	*cl;
;1887:
;1888:	// if we are doing a chase cam or a remote view, grab the latest info
;1889:	if ( ent->client->sess.spectatorState == SPECTATOR_FOLLOW ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 2
NEI4 $870
line 1892
;1890:		int		clientNum, flags;
;1891:
;1892:		clientNum = ent->client->sess.spectatorClient;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1644
ADDP4
INDIRI4
ASGNI4
line 1895
;1893:
;1894:		// team follow1 and team follow2 go to whatever clients are playing
;1895:		if ( clientNum == -1 ) {
ADDRLP4 4
INDIRI4
CNSTI4 -1
NEI4 $872
line 1896
;1896:			clientNum = level.follow1;
ADDRLP4 4
ADDRGP4 level+212
INDIRI4
ASGNI4
line 1897
;1897:		} else if ( clientNum == -2 ) {
ADDRGP4 $873
JUMPV
LABELV $872
ADDRLP4 4
INDIRI4
CNSTI4 -2
NEI4 $875
line 1898
;1898:			clientNum = level.follow2;
ADDRLP4 4
ADDRGP4 level+216
INDIRI4
ASGNI4
line 1899
;1899:		}
LABELV $875
LABELV $873
line 1900
;1900:		if ( clientNum >= 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $878
line 1901
;1901:			cl = &level.clients[ clientNum ];
ADDRLP4 0
CNSTI4 2972
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 1902
;1902:			if ( cl->pers.connected == CON_CONNECTED && cl->sess.sessionTeam != TEAM_SPECTATOR ) {
ADDRLP4 12
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 1380
ADDP4
INDIRI4
CNSTI4 2
NEI4 $880
ADDRLP4 12
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
EQI4 $880
line 1903
;1903:				flags = (cl->ps.eFlags & ~(EF_VOTED | EF_TEAMVOTED)) | (ent->client->ps.eFlags & (EF_VOTED | EF_TEAMVOTED));
ADDRLP4 16
CNSTI4 108
ASGNI4
ADDRLP4 8
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
CNSTI4 -540673
BANDI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
CNSTI4 540672
BANDI4
BORI4
ASGNI4
line 1904
;1904:				ent->client->ps = cl->ps;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ADDRLP4 0
INDIRP4
INDIRB
ASGNB 1380
line 1905
;1905:				ent->client->ps.pm_flags |= PMF_FOLLOW;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 1906
;1906:				ent->client->ps.eFlags = flags;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1907
;1907:				return;
ADDRGP4 $869
JUMPV
LABELV $880
line 1908
;1908:			} else {
line 1910
;1909:				// drop them to free spectators unless they are dedicated camera followers
;1910:				if ( ent->client->sess.spectatorClient >= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1644
ADDP4
INDIRI4
CNSTI4 0
LTI4 $882
line 1911
;1911:					ent->client->sess.spectatorState = SPECTATOR_FREE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1640
ADDP4
CNSTI4 1
ASGNI4
line 1912
;1912:					ClientBegin( ent->client - level.clients, qtrue );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 level
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2972
DIVI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 ClientBegin
CALLV
pop
line 1913
;1913:				}
LABELV $882
line 1914
;1914:			}
line 1915
;1915:		}
LABELV $878
line 1916
;1916:	}
LABELV $870
line 1918
;1917:
;1918:	if ( ent->client->sess.spectatorState == SPECTATOR_SCOREBOARD ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1640
ADDP4
INDIRI4
CNSTI4 3
NEI4 $884
line 1919
;1919:		ent->client->ps.pm_flags |= PMF_SCOREBOARD;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
line 1920
;1920:	} else {
ADDRGP4 $885
JUMPV
LABELV $884
line 1921
;1921:		ent->client->ps.pm_flags &= ~PMF_SCOREBOARD;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -8193
BANDI4
ASGNI4
line 1922
;1922:	}
LABELV $885
line 1923
;1923:}
LABELV $869
endproc SpectatorClientEndFrame 24 8
export ClientEndFrame
proc ClientEndFrame 20 16
line 1934
;1924:
;1925:/*
;1926:==============
;1927:ClientEndFrame
;1928:
;1929:Called at the end of each server frame for each connected client
;1930:A fast client will have multiple ClientThink for each ClientEdFrame,
;1931:while a slow client may have multiple ClientEndFrame between ClientThink.
;1932:==============
;1933:*/
;1934:void ClientEndFrame( gentity_t *ent ) {
line 1938
;1935:	int			i;
;1936:	clientPersistant_t	*pers;
;1937:
;1938:	if ( ent->client->sess.sessionTeam == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1632
ADDP4
INDIRI4
CNSTI4 3
NEI4 $887
line 1939
;1939:		SpectatorClientEndFrame( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 SpectatorClientEndFrame
CALLV
pop
line 1940
;1940:		return;
ADDRGP4 $886
JUMPV
LABELV $887
line 1943
;1941:	}
;1942:
;1943:	pers = &ent->client->pers;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1380
ADDP4
ASGNP4
line 1946
;1944:
;1945:	// turn off any expired powerups
;1946:	for ( i = 0 ; i < MAX_POWERUPS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $889
line 1947
;1947:		if ( ent->client->ps.powerups[ i ] < level.time ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $893
line 1948
;1948:			ent->client->ps.powerups[ i ] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 344
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 1949
;1949:		}
LABELV $893
line 1950
;1950:	}
LABELV $890
line 1946
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $889
line 1964
;1951:
;1952:	// save network bandwidth
;1953:#if 0
;1954:	if ( !g_synchronousClients->integer && (ent->client->ps.pm_type == PM_NORMAL || ent->client->ps.pm_type == PM_FLOAT) ) {
;1955:		// FIXME: this must change eventually for non-sync demo recording
;1956:		VectorClear( ent->client->ps.viewangles );
;1957:	}
;1958:#endif
;1959:
;1960:	//
;1961:	// If the end of unit layout is displayed, don't give
;1962:	// the player any normal movement attributes
;1963:	//
;1964:	if ( level.intermissiontime ) {
ADDRGP4 level+9008
INDIRI4
CNSTI4 0
EQI4 $896
line 1965
;1965:		return;
ADDRGP4 $886
JUMPV
LABELV $896
line 1969
;1966:	}
;1967:
;1968:	// burn from lava, etc
;1969:	P_WorldEffects (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 P_WorldEffects
CALLV
pop
line 1972
;1970:
;1971:	// apply all the damage taken this frame
;1972:	P_DamageFeedback (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 P_DamageFeedback
CALLV
pop
line 1975
;1973:
;1974:	// add the EF_CONNECTION flag if we haven't gotten commands recently
;1975:	if ( level.time - ent->client->lastCmdTime > 1000 ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1716
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
LEI4 $899
line 1976
;1976:		ent->s.eFlags |= EF_CONNECTION;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
line 1977
;1977:	} else {
ADDRGP4 $900
JUMPV
LABELV $899
line 1978
;1978:		ent->s.eFlags &= ~EF_CONNECTION;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -8193
BANDI4
ASGNI4
line 1979
;1979:	}
LABELV $900
line 1981
;1980:
;1981:	ent->client->ps.stats[STAT_HEALTH] = ent->health;	// FIXME: get rid of ent->health...
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ASGNI4
line 1983
;1982:
;1983:	G_SetClientSound (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_SetClientSound
CALLV
pop
line 1986
;1984:
;1985:	// set the latest infor
;1986:	if (g_smoothClients.integer) {
ADDRGP4 g_smoothClients+12
INDIRI4
CNSTI4 0
EQI4 $902
line 1987
;1987:		BG_PlayerStateToEntityStateExtraPolate( &ent->client->ps, &ent->s, ent->client->ps.commandTime, qtrue );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 BG_PlayerStateToEntityStateExtraPolate
CALLV
pop
line 1988
;1988:	}
ADDRGP4 $903
JUMPV
LABELV $902
line 1989
;1989:	else {
line 1990
;1990:		BG_PlayerStateToEntityState( &ent->client->ps, &ent->s, qtrue );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 BG_PlayerStateToEntityState
CALLV
pop
line 1991
;1991:	}
LABELV $903
line 1992
;1992:	SendPendingPredictableEvents( &ent->client->ps );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRGP4 SendPendingPredictableEvents
CALLV
pop
line 1997
;1993:
;1994:	// set the bit for the reachability area the client is currently in
;1995://	i = trap_AAS_PointReachabilityAreaIndex( ent->client->ps.origin );
;1996://	ent->client->areabits[i >> 3] |= 1 << (i & 7);
;1997:}
LABELV $886
endproc ClientEndFrame 20 16
import saberOnSound
import saberOffSound
import uwRename
import G_ApplyKnockback
import PM_SaberInReturn
import PM_SaberInStart
import PM_SaberInTransition
import trap_ROFF_Purge_Ent
import trap_ROFF_Play
import trap_ROFF_Cache
import trap_ROFF_UpdateEntities
import trap_ROFF_Clean
import trap_SP_GetStringTextString
import trap_SP_Register
import trap_SP_RegisterServer
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_ForcePower
import trap_EA_Alt_Attack
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import jd_CloseServer
import jd_FakePlayerDetection
import jd_antiForceCrash
import jd_antiNameCrash
import jd_antiFlood
import cm_clanLogout_saying
import cm_clanLogin_saying
import cm_teleport_saying
import cm_slay_saying
import cm_sleep_off_saying
import cm_sleep_on_saying
import cm_punish_off_saying
import cm_punish_on_saying
import cm_slap_saying
import cm_silence_off_saying
import cm_silence_on_saying
import cm_protect_off_saying
import cm_protect_on_saying
import cm_terminator_off_saying
import cm_terminator_on_saying
import cm_empower_off_saying
import cm_empower_on_saying
import cm_AdminLogout3_saying
import cm_AdminLogout2_saying
import cm_AdminLogout1_saying
import cm_AdminLogin3_saying
import cm_AdminLogin2_saying
import cm_AdminLogin1_saying
import cm_adminPassword3
import cm_adminPassword2
import cm_adminPassword1
import cm_clanPassword
import cm_voteControl
import cm_emoteControl
import cm_adminControl3
import cm_adminControl2
import cm_adminControl1
import cm_adminLevel3
import cm_adminLevel2
import cm_adminLevel1
import cm_report
import cm_clanTag
import cm_badwords
import sv_maxConnections
import cm_autoprotecttime
import cm_knockmedown
import cm_blacknames
import cm_duelshield
import cm_duelhealth
import cm_duelradius
import cm_duelstatus
import mod_pushall
import cm_samenames
import cm_duelbeginsaberoff
import cm_multiduels
import cm_dualblade
import cm_motd_time
import cm_motd
import cm_console_motd
import g_austrian
import g_saberDebugPrint
import g_saberDmgDelay_Wound
import g_saberDmgDelay_Idle
import g_saberDmgVelocityScale
import g_timeouttospec
import g_forceDodge
import g_dismember
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_debugUp
import g_debugRight
import g_debugForward
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_adaptRespawn
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlySaber
import g_friendlyFire
import g_saberInterpolate
import g_capturelimit
import g_timelimit
import g_duel_fraglimit
import g_fraglimit
import g_duelWeaponDisable
import g_fraglimitVoteCorrection
import g_allowDuelSuicide
import g_weaponDisable
import g_forcePowerDisable
import g_spawnInvulnerability
import g_forceRegenTime
import g_saberDamageScale
import g_slowmoDuelEnd
import g_logClientInfo
import g_saberBoxTraceSize
import g_saberAlwaysBoxTrace
import g_saberGhoul2Collision
import g_saberTraceSaberFirst
import g_saberLockFactor
import g_saberLocking
import g_privateDuel
import g_forceBasedTeams
import g_maxForceRank
import g_dmflags
import g_autoMapCycle
import g_trueJedi
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectSagaSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import B_CleanupAlloc
import B_InitAlloc
import InFieldOfVision
import BotOrder
import OrgVisible
import InitSagaMode
import G_ClearClientLog
import G_LogExit
import G_LogWeaponOutput
import G_LogWeaponInit
import G_LogWeaponItem
import G_LogWeaponPowerup
import G_LogWeaponFrag
import G_LogWeaponDeath
import G_LogWeaponKill
import G_LogWeaponDamage
import G_LogWeaponFire
import G_LogWeaponPickup
import Jedi_DodgeEvasion
import ForceTelepathy
import ForceThrow
import ForceSeeing
import ForceTeamForceReplenish
import ForceTeamHeal
import ForceAbsorb
import ForceProtect
import ForceGrip
import ForceRage
import ForceSpeed
import ForceHeal
import ForcePowerUsableOn
import WP_ForcePowersUpdate
import WP_SpawnInitForcePowers
import WP_InitForcePowers
import WP_SaberInitBladeData
import WP_SaberCanBlock
import WP_SaberPositionUpdate
import WP_ForcePowerStop
import HasSetSaberOnly
import G_PreDefSound
import G_RefreshNextMap
import G_DoesMapSupportGametype
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_CheckDroppedItem
import OnSameTeam
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_GetStripEdString
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import gSlowMoDuelTime
import gDoSlowMoDuel
import g_ff_objectives
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import BlowDetpacks
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import gJMSaberEnt
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamCount
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import WP_FireGenericBlasterMissile
import WP_FireTurretMissile
import G_CreateExampleAnimEnt
import G_PlayerBecomeATST
import ATST_ManageDamageBoxes
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import WP_FireBlasterMissile
import G_ExplodeMissile
import G_BounceProjectile
import CreateMissile
import G_RunMissile
import G_ReflectMissile
import gGAvoidDismember
import G_CheckForDismemberment
import ExplodeDeath
import TossClientCubes
import TossClientItems
import TossClientWeapon
import body_die
import G_RadiusDamage
import G_Damage
import CanDamage
import trap_G2API_SetBoneAnim
import trap_G2API_GetGLAName
import trap_G2API_SetBoneAngles
import trap_G2API_CollisionDetect
import trap_G2API_CleanGhoul2Models
import trap_G2API_RemoveGhoul2Model
import trap_G2API_HasGhoul2ModelOnIndex
import trap_G2API_DuplicateGhoul2Instance
import trap_G2API_CopySpecificGhoul2Model
import trap_G2API_CopyGhoul2Instance
import trap_G2API_SetBoltInfo
import trap_G2API_AddBolt
import trap_G2API_InitGhoul2Model
import trap_G2API_GetBoltMatrix_NoRecNoRot
import trap_G2API_GetBoltMatrix_NoReconstruct
import trap_G2API_GetBoltMatrix
import trap_G2_HaveWeGhoul2Models
import trap_G2_SetGhoul2ModelIndexes
import trap_G2_ListModelBones
import trap_G2_ListModelSurfaces
import G_SkinIndex
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_RunObject
import G_TouchSolids
import G_EntitiesFree
import G_FreeEntity
import G_KillG2Queue
import G_SendG2KillQueue
import TryUse
import G_EntitySound
import G_SoundAtLoc
import G_Sound
import G_MuteSound
import G_ScreenShake
import G_PlayEffect
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetAngles
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_RadiusList
import G_Find
import G_KillBox
import G_TeamCommand
import G_EffectIndex
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import ResetItem
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import ItemUse_MedPack
import ItemUse_Seeker
import ItemUse_Sentry
import ItemUse_Shield
import ItemUse_Binoculars
import G_GetDuelWinner
import Cmd_EngageDuel_f
import Cmd_ToggleSaber_f
import G_ItemUsable
import Cmd_SaberAttackCycle_f
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import gEscapeTime
import gEscaping
import g2SaberInstance
import precachedKyle
import forcePowerDarkLight
import WeaponAttackAnim
import WeaponReadyAnim
import BG_OutOfMemory
import BG_StringAlloc
import BG_TempFree
import BG_TempAlloc
import BG_AllocUnaligned
import BG_Alloc
import BG_CanUseFPNow
import BG_HasYsalamiri
import BG_GetItemIndexByTag
import BG_ParseAnimationFile
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_ForcePowerDrain
import BG_SaberStartTransAnim
import BG_InDeathAnim
import BG_InRoll
import BG_KnockawayForParry
import BG_BrokenParryForParry
import BG_BrokenParryForAttack
import BG_SaberInSpecialAttack
import BG_SpinningSaberAnim
import BG_FlippingAnim
import BG_SaberInIdle
import BG_SaberInSpecial
import BG_SaberInAttack
import BG_DirectFlippingAnim
import BG_InSaberStandAnim
import BG_InSpecialJump
import BG_LegalizedForcePowers
import saberMoveData
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import vectoyaw
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import pm
import bgForcePowerCost
import forceMasteryPoints
import forceMasteryLevels
import bgGlobalAnimations
import BGPAFtextLoaded
import forcePowerSorted
import WP_MuzzlePoint
import ammoData
import weaponData
import GetStringForID
import GetIDForString
import Q_irand
import irand
import flrand
import Rand_Init
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseVec4
import COM_ParseFloat
import COM_ParseInt
import COM_ParseString
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import SkipWhitespace
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import powf
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkBlue
import colorLtBlue
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import colorTable
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import forceSpeedLevels
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $833
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 109
char 1 101
char 1 108
char 1 101
char 1 101
char 1 47
char 1 112
char 1 117
char 1 110
char 1 99
char 1 104
char 1 37
char 1 100
char 1 0
align 1
LABELV $695
char 1 99
char 1 101
char 1 110
char 1 116
char 1 101
char 1 114
char 1 118
char 1 105
char 1 101
char 1 119
char 1 10
char 1 0
align 1
LABELV $626
char 1 80
char 1 76
char 1 68
char 1 85
char 1 69
char 1 76
char 1 83
char 1 84
char 1 79
char 1 80
char 1 0
align 1
LABELV $625
char 1 112
char 1 114
char 1 105
char 1 110
char 1 116
char 1 32
char 1 34
char 1 37
char 1 115
char 1 10
char 1 34
char 1 0
align 1
LABELV $617
char 1 80
char 1 76
char 1 68
char 1 85
char 1 69
char 1 76
char 1 84
char 1 73
char 1 69
char 1 0
align 1
LABELV $616
char 1 99
char 1 112
char 1 32
char 1 34
char 1 37
char 1 115
char 1 10
char 1 34
char 1 0
align 1
LABELV $612
char 1 112
char 1 114
char 1 105
char 1 110
char 1 116
char 1 32
char 1 34
char 1 37
char 1 115
char 1 32
char 1 37
char 1 115
char 1 32
char 1 37
char 1 115
char 1 33
char 1 10
char 1 34
char 1 0
align 1
LABELV $611
char 1 80
char 1 76
char 1 68
char 1 85
char 1 69
char 1 76
char 1 87
char 1 73
char 1 78
char 1 78
char 1 69
char 1 82
char 1 0
align 1
LABELV $610
char 1 83
char 1 86
char 1 73
char 1 78
char 1 71
char 1 65
char 1 77
char 1 69
char 1 0
align 1
LABELV $609
char 1 99
char 1 112
char 1 32
char 1 34
char 1 37
char 1 115
char 1 32
char 1 37
char 1 115
char 1 32
char 1 37
char 1 115
char 1 33
char 1 10
char 1 34
char 1 0
align 1
LABELV $596
char 1 112
char 1 114
char 1 105
char 1 110
char 1 116
char 1 32
char 1 34
char 1 37
char 1 115
char 1 32
char 1 94
char 1 55
char 1 115
char 1 117
char 1 114
char 1 118
char 1 105
char 1 118
char 1 101
char 1 100
char 1 32
char 1 119
char 1 105
char 1 116
char 1 104
char 1 32
char 1 94
char 1 53
char 1 37
char 1 100
char 1 32
char 1 94
char 1 55
char 1 104
char 1 101
char 1 97
char 1 108
char 1 116
char 1 104
char 1 32
char 1 97
char 1 110
char 1 100
char 1 32
char 1 94
char 1 53
char 1 37
char 1 100
char 1 32
char 1 94
char 1 55
char 1 115
char 1 104
char 1 105
char 1 101
char 1 108
char 1 100
char 1 10
char 1 34
char 1 0
align 1
LABELV $576
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 47
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 111
char 1 110
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $575
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 47
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 111
char 1 102
char 1 102
char 1 113
char 1 117
char 1 105
char 1 99
char 1 107
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $558
char 1 115
char 1 112
char 1 101
char 1 99
char 1 116
char 1 97
char 1 116
char 1 111
char 1 114
char 1 0
align 1
LABELV $505
char 1 51
char 1 51
char 1 0
align 1
LABELV $501
char 1 56
char 1 0
align 1
LABELV $500
char 1 112
char 1 109
char 1 111
char 1 118
char 1 101
char 1 95
char 1 109
char 1 115
char 1 101
char 1 99
char 1 0
align 1
LABELV $398
char 1 94
char 1 50
char 1 74
char 1 101
char 1 100
char 1 105
char 1 68
char 1 111
char 1 103
char 1 39
char 1 115
char 1 32
char 1 67
char 1 108
char 1 97
char 1 110
char 1 32
char 1 77
char 1 111
char 1 100
char 1 32
char 1 94
char 1 53
char 1 66
char 1 101
char 1 116
char 1 97
char 1 0
align 1
LABELV $397
char 1 99
char 1 112
char 1 32
char 1 34
char 1 94
char 1 49
char 1 37
char 1 115
char 1 10
char 1 37
char 1 115
char 1 10
char 1 84
char 1 105
char 1 109
char 1 101
char 1 76
char 1 101
char 1 102
char 1 116
char 1 58
char 1 32
char 1 94
char 1 51
char 1 37
char 1 100
char 1 34
char 1 0
align 1
LABELV $396
char 1 99
char 1 109
char 1 95
char 1 109
char 1 111
char 1 116
char 1 100
char 1 0
align 1
LABELV $391
char 1 112
char 1 114
char 1 105
char 1 110
char 1 116
char 1 32
char 1 34
char 1 84
char 1 104
char 1 101
char 1 32
char 1 99
char 1 108
char 1 97
char 1 110
char 1 32
char 1 110
char 1 97
char 1 109
char 1 101
char 1 32
char 1 121
char 1 111
char 1 117
char 1 32
char 1 119
char 1 101
char 1 114
char 1 101
char 1 32
char 1 117
char 1 115
char 1 105
char 1 110
char 1 103
char 1 32
char 1 119
char 1 97
char 1 115
char 1 32
char 1 112
char 1 114
char 1 111
char 1 116
char 1 101
char 1 99
char 1 116
char 1 101
char 1 100
char 1 44
char 1 32
char 1 121
char 1 111
char 1 117
char 1 32
char 1 104
char 1 97
char 1 118
char 1 101
char 1 32
char 1 98
char 1 101
char 1 101
char 1 110
char 1 32
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 102
char 1 117
char 1 108
char 1 108
char 1 121
char 1 32
char 1 114
char 1 101
char 1 110
char 1 97
char 1 109
char 1 101
char 1 100
char 1 46
char 1 10
char 1 34
char 1 0
align 1
LABELV $390
char 1 80
char 1 97
char 1 100
char 1 97
char 1 119
char 1 97
char 1 110
char 1 0
align 1
LABELV $387
char 1 99
char 1 112
char 1 32
char 1 34
char 1 94
char 1 49
char 1 89
char 1 111
char 1 117
char 1 114
char 1 32
char 1 99
char 1 108
char 1 97
char 1 110
char 1 32
char 1 116
char 1 97
char 1 103
char 1 32
char 1 105
char 1 115
char 1 32
char 1 114
char 1 101
char 1 115
char 1 101
char 1 114
char 1 118
char 1 101
char 1 100
char 1 32
char 1 102
char 1 111
char 1 114
char 1 32
char 1 109
char 1 101
char 1 109
char 1 98
char 1 101
char 1 114
char 1 115
char 1 32
char 1 111
char 1 110
char 1 108
char 1 121
char 1 33
char 1 10
char 1 94
char 1 49
char 1 80
char 1 108
char 1 101
char 1 97
char 1 115
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 110
char 1 103
char 1 101
char 1 32
char 1 105
char 1 116
char 1 44
char 1 32
char 1 111
char 1 114
char 1 32
char 1 108
char 1 111
char 1 103
char 1 105
char 1 110
char 1 32
char 1 105
char 1 110
char 1 32
char 1 94
char 1 51
char 1 37
char 1 100
char 1 32
char 1 115
char 1 101
char 1 99
char 1 111
char 1 110
char 1 100
char 1 115
char 1 94
char 1 49
char 1 44
char 1 10
char 1 94
char 1 49
char 1 111
char 1 114
char 1 32
char 1 121
char 1 111
char 1 117
char 1 114
char 1 32
char 1 99
char 1 108
char 1 97
char 1 110
char 1 32
char 1 110
char 1 97
char 1 109
char 1 101
char 1 32
char 1 119
char 1 105
char 1 108
char 1 108
char 1 32
char 1 98
char 1 101
char 1 32
char 1 114
char 1 101
char 1 109
char 1 111
char 1 118
char 1 101
char 1 100
char 1 46
char 1 10
char 1 34
char 1 0
align 1
LABELV $355
char 1 99
char 1 112
char 1 32
char 1 34
char 1 84
char 1 101
char 1 110
char 1 32
char 1 115
char 1 101
char 1 99
char 1 111
char 1 110
char 1 100
char 1 115
char 1 32
char 1 117
char 1 110
char 1 116
char 1 105
char 1 108
char 1 32
char 1 105
char 1 110
char 1 97
char 1 99
char 1 116
char 1 105
char 1 118
char 1 105
char 1 116
char 1 121
char 1 32
char 1 100
char 1 114
char 1 111
char 1 112
char 1 33
char 1 10
char 1 34
char 1 0
align 1
LABELV $351
char 1 68
char 1 114
char 1 111
char 1 112
char 1 112
char 1 101
char 1 100
char 1 32
char 1 100
char 1 117
char 1 101
char 1 32
char 1 116
char 1 111
char 1 32
char 1 105
char 1 110
char 1 97
char 1 99
char 1 116
char 1 105
char 1 118
char 1 105
char 1 116
char 1 121
char 1 0
align 1
LABELV $135
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 112
char 1 108
char 1 97
char 1 121
char 1 101
char 1 114
char 1 47
char 1 103
char 1 117
char 1 114
char 1 112
char 1 50
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $132
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 112
char 1 108
char 1 97
char 1 121
char 1 101
char 1 114
char 1 47
char 1 103
char 1 117
char 1 114
char 1 112
char 1 49
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
